./chap1 <<< ")load chap1_ut.input1"
-> 
Current Directory is: /home/dawsond/c/proglang/chap1
 Loading file : chap1_ut.input1

!Redo tests from section 1.1.3 of Kamin's text using the Pascal-style syntax

3$
3

4+7$
11

x:=4$
4

x+x$
8

print x$
4
4

y:=5$
5

seq print x; print y; x*y qes$
4
5
20

if y>0 then 5 else 10 fi$
5

while y>0 do
  seq x:=x+x; y:=y-1 qes
od$
0

x$
128

fun #1 (x) := x + 1 nuf$
#1

#1(4)$
5

fun double(x):=x+x nuf$
double

double(4)$
8

x$
128

fun setx(x,y):= seq x:=x+y; x qes nuf$
setx

setx(x,1)$
129

x$
128

fun not(boolval):= if boolval then 0 else 1 fi nuf$
not

fun ## (x,y):= not(x=y) nuf$
##

fun mod(m,n):=m-n*(m/n)nuf$
mod

fun gcd(m,n):=
 seq
  r:=mod(m,n);
  while ##(r,0) do
   seq
    m:=n;
    n:=r;
    r:=mod(m,n)
   qes
  od;
  n
 qes
nuf$
gcd

gcd(6,15)$
3


fun gcd(m,n):=
  if n=0 then m else gcd(n,mod(m,n)) fi nuf$
gcd

gcd(6,15)$
3


!Normal precedence and associativity are implemented.
5*3+7$
22

5+3*7$
26

14-7-3$
4

48/12/2$
2


!relational operators
5<10$
1

5>10$
0

5=5$
1

10<5$
0

10<5>-1$
1

10<5>-1=1$
1


!Keywords cannot be redefined
fun if (x) := x+5 nuf$
*****Error parsing function name.  Found if where funid or nameid is expected.

if := 20$
*****Error parsing expr.  Found := where one of the following is expected:
"if", "while", "seq", "print", nameid, funid, number, or "("


!Names may contain any char that is not a delimiter and must
!not contain only digits.
!Delimiters = ' ','(',')','+','-','*','/',':','=','<','>',';',',','$','!'
~12#ab:=25$
25

~12#ab$
25

x:=15-~12#ab+7$
-3


!A string of digits is not a valid name.
fun 222  (x) := x+222 nuf$
*****Error parsing function name.  Found 222 where funid or nameid is expected.


!Inserting a non-delimiter char into a string of digits makes a valid name.
fun 222# (x) := x+222 nuf$
222#

222#(3)$
225

x:=100-222#(3)-50$
-175


!Inserting a delimiter in a name causes erroneous results.
a(b:=25$
*****Undefined variable: a


!Function name may not be reused as a variable name.
fun inc10 (x) := x+10 nuf$
inc10

inc10:=25$
*****Error in match. Found :=  where ( is expected.


!Multiple assignment
i:=j:=k:=25$
25

i$
25

j$
25

k$
25


!ERROR MESSAGE TESTS

fun david(x,+,z):= x+1 nuf$
*****Error parsing arglist.  Found + where ")" or nameid is expected.

fun +++(x):= x+1 nuf$
*****Error parsing function name.  Found + where funid or nameid is expected.

abc:=)25$
*****Error parsing exp6.  Found ) where nameid, funid, "(", or a number is expected.


!The next 4 inputs below test the error checking for invalid load commands.
!A valid load command inside a file being loaded will abort the program.
!See chap1_ut.input3 and chap1_ut.input4 for such test cases.
!But since these are invalid load commands, an error message is printed and
!the program moves on to the next input. Moving on instead of aborting may
!not be desirable if the instructions that failed to load were required 
!for the commands that follow to work correctly.
!But that is how I decided to implement it for now.
!
!An instruction ending with a $ must occur after a comment line before any
!command is entered. This causes readDollar function to return to readInput
!function where the right parenthesis that begins a command is checked for.
!That is the purpose of the two lines below that contain only a $.
!See the comments in chap1_ut.input3 for a detailed explanation about this.
!
$
)abcdefghi argument$
*****Command Name exceeds 8 chars, begins: abcdefgh

)123 mod.txt$
*****Error: expected Command name, instead read: 1

)average mod.txt$
*****Unrecognized Command Name, begins: average


!Max ARGLENG=40. Arg below has 41 chars.
$
)load abcdefghijklmnopqrstuvwxyzabcdefghijklmno$
*****Argument name exceeds 40 chars, begins: abcdefghijklmnopqrstuvwxyzabcdefghijklmn


!Max NAMELENG=20 but the var and function names below have 21 chars.
print abcdefghijklmnopqrstu$
*****Name exceeds 20 chars, begins: abcdefghijklmnopqrst

fun abcdefghijklmnopqrstu(x):=x+10 nuf$
*****Name exceeds 20 chars, begins: abcdefghijklmnopqrst


!MAXDIGITS=19 but value below has 20 digits.
d:=99999999999999999999$
*****parseVal: Max digits allowed in 64 bit signed long is 19


22:=4$
*****parseExp1: left hand side of assignment must be a variable

mod(100)$
*****Wrong number of arguments to: mod


quit$
./chap1 <<< ")load chap1_ut.input2"
-> 
Current Directory is: /home/dawsond/c/proglang/chap1
 Loading file : chap1_ut.input2

!Test Cases for exceeding MAXINPUT and MAXNAMES

!Following lines exceed MAXNAMES=28. Builtin names = 26.
!So third name below is 29th name and triggers the error.
a:=25$
25

b:=100$
100

c:=200$
*****No more room for names


!Following function definition exceeds MAXINPUT=50. This error causes
!the program to skip the rest of the file and exit. So the function 
!definition for not2 below is skipped and no error message will appear
!for it in the result file.
fun not(boolVal):=
if boolVal then
print 0
els*****Input exceeds 50 chars. Last char read = s
Skipping rest of input and quitting.

./chap1 <<< ")load chap1_ut.input3"
-> 
Current Directory is: /home/dawsond/c/proglang/chap1
 Loading file : chap1_ut.input3

fun mod(m,n):=m-n*(m/n)nuf$
mod

mod(100,53)$
47


fun not(boolval):= 
  if boolval then 
  0 
  else
  1
  fi
nuf$
not

not(3)$
0

not(0)$
1


!Load commands cannot occur inside a file being loaded.
!So the one below causes the program to print an error and quit.
!The load command below is preceded by a line with a single dollar sign.
!The reason for this is as follows.
!
!The end of input marker for the interpreter is a $.
!The readInput and readDollar functions read input as follows.
!readInput displays the main prompt and reads the first input line.
!If it ends with a $ then the input is complete and the main prompt is
!redisplayed for the next input.
!Otherwise it calls readDollar to repeatedly display the continuation prompt
!and read another line until a $ is read.
!If EOF occurs then a $ is returned.
!
!Consider the above mod function definition.
!It is on one line ending with a $.
!So readInput reads that line without calling readDollar.
!
!Consider the above not function defintion on multiple lines. 
!After readInput reads the first line, it reaches eoln without seeing a $.
!So it calls readDollar to prompt for and read lines until "nuf$" is read.
!
!Now consider these comment lines which begin with an exclamation point.
!When readInput sees an exclamation point, it ignores all chars that follow
!on that line. So after readInput reads the first comment line, 
!it reaches eoln without seeing a $. It then calls readDollar to read
!lines until a $ is reached.
!
!The chap1 interpreter accepts three kinds of input:
! 1. function defintions - such as those for mod and not above
! 2. expressions - such as the function calls to mod and not above
! 3. commands - such as the load command below
!Commands must have a right parenthesis as the first char on the line.
!
!The last thing to be aware of is that commands are only checked for
!in the readInput function, not in the readDollar function.
!So after readInput displays the main prompt, if it reads a
!right parenthesis of the load cmd below as the first input char,
!it knows it must branch away from reading expressions and function defs 
!to process a command (e.g. to open a file to read more expressions
!and function definitions from).
!But if readDollar sees the right parenthesis of the load cmd below
!as the first char of an input line, it will read it and the chars that 
!follow as part of an expression or function def and get a syntax error
!since it does not have the logic to detect and process commands.
!
!Now consider what will happen to the following load command which is
!preceded by a comment line followed by a $ line as shown below.
!As mentioned earlier, after readInput reads the first comment line,
!it calls readDollar to keep reading until a $ is reached.
!So readDollar will be reading all comment lines that follow the
!the first one above. After it reads the last comment line
!below, it will read the $ line which will cause it to return
!to readInput. Since all comment chars were ignored, a line
!containing only a $ is received as input which is a blank line
!which is skipped. readinput then reads the right parenthesis
!and detects and processes the load command.
!
!However, in this case the load command is illegal since it is contained
!in a file. The processCmd logic will recognize that it is already
!reading from this file and that the command to open and read from
!another one is invalid. It will issue an error message and quit the program.
!
$
)load gcd_only.txt$
*****Load commands cannot occur inside a file being loaded.
*****Remove the load command for file gcd_only.txt

./chap1 <<< ")sload chap1_ut.input4"
-> 
Current Directory is: /home/dawsond/c/proglang/chap1
 Loading file : chap1_ut.input4

mod

47

not

0

1

*****Load commands cannot occur inside a file being loaded.
*****Remove the load command for file gcd_only.txt

