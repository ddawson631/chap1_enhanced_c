{\rtf1\ansi\deff4\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq0\fcharset128 Times New Roman;}{\f5\froman\fprq0\fcharset128 Liberation Mono{\*\falt Courier New};}{\f6\froman\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f7\froman\fprq0\fcharset128 Courier New;}{\f8\fnil\fprq2\fcharset0 NSimSun;}{\f9\fnil\fprq2\fcharset0 Times New Roman;}{\f10\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f11\fnil\fprq2\fcharset0 Courier New;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red228\green0\blue114;\red201\green33\blue30;\red196\green0\blue98;\red220\green0\blue0;}
{\stylesheet{\s0\snext0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081 Normal;}
{\s1\sbasedon29\snext1\rtlch\alang1081 \ltrch\langfe1081\hich\af6\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb240\sa120\keepn\cf0\f6\fs48\b\kerning1\dbch\af8\langfe1081 heading 1;}
{\s2\sbasedon29\snext2\rtlch\alang1081 \ltrch\langfe1081\hich\af6\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb200\sa120\keepn\cf0\f6\fs36\b\kerning1\dbch\af8\langfe1081 heading 2;}
{\s3\sbasedon29\snext3\rtlch\alang1081 \ltrch\langfe1081\hich\af6\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb140\sa120\keepn\cf0\f6\fs28\b\kerning1\dbch\af8\langfe1081 heading 3;}
{\*\cs15\snext15\loch\fs24 Default Paragraph Font;}
{\*\cs16\snext16\loch\cf9\fs24\ul\ulc0 ListLabel 1;}
{\*\cs17\snext17\loch\fs24\i Emphasis;}
{\*\cs18\snext18\loch\cf13\fs24\ul\ulc0 FollowedHyperlink;}
{\*\cs19\snext19\loch\fs24\b Strong;}
{\*\cs20\snext20\loch\cf9\fs24\ul\ulc0 Hyperlink;}
{\*\cs21\snext21\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\cf0\super\f4\fs24\kerning1\dbch\af8\langfe1081 MySuperscript2;}
{\*\cs22\snext22\loch\fs24 Footnote Characters;}
{\*\cs23\snext23\loch\fs24 Numbering Symbols;}
{\*\cs24\snext24\loch\cf9\fs24\ul\ulc0 ListLabel 2;}
{\*\cs25\snext25\hich\af5\loch\f5\fs24\dbch\af8 Source Text;}
{\*\cs26\snext26\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\cf0\super\f4\fs24\kerning1\dbch\af8\langfe1081 MySuperscript;}
{\*\cs27\snext27\loch\cf9\ul\ulc0\kerning0\dbch\af9 ListLabel 3;}
{\*\cs28\snext28\loch\cf9\ul\ulc0\kerning0\dbch\af9 ListLabel 4;}
{\s29\sbasedon0\snext30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb240\sa120\keepn\cf0\f4\fs24\kerning1\dbch\af10\langfe1081 Heading;}
{\s30\sbasedon0\snext30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081 Body Text;}
{\s31\sbasedon30\snext31\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs24\kerning1\dbch\af8\langfe1081 List;}
{\s32\sbasedon0\snext32\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb120\sa120\cf0\f4\fs24\i\kerning1\dbch\af8\langfe1081 caption;}
{\s33\sbasedon0\snext33\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs24\kerning1\dbch\af8\langfe1081 Index;}
{\s34\sbasedon0\snext34\rtlch\alang1081 \ltrch\langfe1081\hich\af5\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f5\fs20\kerning1\dbch\af8\langfe1081 Preformatted Text;}
{\s35\snext35\rtlch\af9\afs24\alang1025 \ltrch\lang1033\langfe1025\hich\af4\loch\widctlpar\hyphpar0\sbauto1\sa115\ltrpar\cf0\f4\fs24\lang1033\kerning1\dbch\af9\langfe1025 Normal (Web);}
{\s36\sbasedon0\snext36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081 SSP Paragraph;}
{\s37\sbasedon0\snext37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081 SSP Para Courier New;}
{\s38\sbasedon0\snext38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081 Table Contents;}
{\s39\sbasedon38\snext39\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\qc\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\b\kerning1\dbch\af8\langfe1081 Table Heading;}
}{\*\generator LibreOffice/25.2.5.1$Windows_X86_64 LibreOffice_project/484541f705153d4ff78284873b0153c3e5a280db}{\info{\author david}{\creatim\yr2025\mo8\dy12\hr21\min13}{\revtim\yr2025\mo9\dy19\hr16\min44}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops{\propname Operator}\proptype30{\staticval david}}\deftab709\deftab709
\hyphauto1\viewscale110\formshade\nobrkwrptbl\landscape\paperh12240\paperw15840\margl360\margr360\margt360\margb360\sectd\sbknone\sftnnar\saftnnrlc\sectunlocked1\lndscpsxn\pgwsxn15840\pghsxn12240\marglsxn360\margrsxn360\margtsxn360\margbsxn360\ftnbj\ftnstart1\ftnrstcont\ftnnar\fet\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\tx0\fahang\fi0\li0\lin0\ri0\rin0{\loch\b\kerning0\dbch\af9\loch
Comparison of C vs Pascal Version of Enhanced Chapter 1 Interpreter }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
This document describes the issues and changes involved in translating the Pascal version (chap1.pas) of the }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
enhanced interpreter into C (chap1.c).}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The grammar (section 1 below) and instruction syntax (section 2 below) did not change.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Section 3 below discusses some of the translation issues and presents a side by side comparison of the Pascal and C source code in part 8 of that section.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\sb0\sa0\ltrpar{\loch\b\kerning0\dbch\af9\loch
Section 1. Grammar for Enhanced Chap1 Interpreter}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\sb0\sa0\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The grammar for chap1.c is still the same as it was for chap1.pas and is as follows.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
userinput \uc2 \u8594\'81\'a8 input $\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
input \uc2 \u8594\'81\'a8 quit | cmdline | fundef | expr\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
cmdline \uc2 \u8594\'81\'a8 )  command\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li1418\lin1418\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\cf1\fs20\kerning0\dbch\af9\loch
note: the right parenthesis must be first char of input line}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
command \uc2 \u8594\'81\'a8 load filename | sload filename\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
filename \uc2 \u8594\'81\'a8 any valid filename for the operating system\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar\rtlch\afs20 \ltrch\langfe1033\loch\fs20\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
fundef \uc2 \u8594\'81\'a8 fun name ( paramlist ) := expr nuf\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
paramlist \uc2 \u8594\'81\'a8 null | name [ , name ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar\rtlch\afs20 \ltrch\langfe1033\loch\fs20\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
expr \uc2 \u8594\'81\'a8 ifex | whileex | seqex | exp1 \uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
ifex \uc2 \u8594\'81\'a8 if expr then expr else expr fi\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
whileex \uc2 \u8594\'81\'a8 while expr do  expr od\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
seqex \uc2 \u8594\'81\'a8 seq explist qes\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
explist \uc2 \u8594\'81\'a8 expr [ ; expr ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp1 \uc2 \u8594\'81\'a8 exp2 [ :=  exp1 ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp2 \uc2 \u8594\'81\'a8 [ prtop ] exp3\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp3 \uc2 \u8594\'81\'a8 exp4 [ relop exp4 ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp4 \uc2 \u8594\'81\'a8 exp5 [ addop exp5 ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp5 \uc2 \u8594\'81\'a8 [ addop ] exp6 [ mulop exp6 ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
exp6 \uc2 \u8594\'81\'a8 name | \uc1 }{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
number}{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
 | funcall | ( expr )}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar\rtlch\afs20 \ltrch\langfe1033\loch\fs20\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
funcall \uc2 \u8594\'81\'a8 name ( arglist )\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
arglist \uc2 \u8594\'81\'a8 null | expr [ , expr ]*\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
prtop \uc2 \u8594\'81\'a8 print\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
relop \uc2 \u8594\'81\'a8 = | < | >\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
addop \uc2 \u8594\'81\'a8 + | -\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa101\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
mulop \uc2 \u8594\'81\'a8 * | /\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
number}{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
 \uc2 \u8594\'81\'a8 sequence of digits\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
name \uc2 \u8594\'81\'a8 any sequence of characters not a \uc1 }{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
number}{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
 and not containing a delimiter.}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
delimiter \uc2 \u8594\'81\'a8 '(', ')', ';', '+', '-', '*', '/', ':', '=', '<', '>', ',', '$', '!' or space\uc1 }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
note: [ and ] enclose optional parts of a production.}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
[ ]   indicates the option may occur once }
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
[ ]* indicates the option may occur more than once}
\par \pard\plain \s30\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\sl276\slmult1\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\sb0\sa140\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\sl240\slmult1\ql\fi0\li709\lin709\ri0\rin0\sb0\sa0\ltrpar{\rtlch\afs20 \ltrch\loch\fs20\kerning0\dbch\af9\loch
The exclamation point begins a comment.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\rtlch\afs20 \ltrch\langfe1033\loch\fs20\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\pagebb\ql\fi0\li0\lin0\ri0\rin0{\loch\b\kerning0\dbch\af9\loch
Section 2. Syntax for Enhanced Chap1 Interpreter}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The syntax for chap1.c is still the same as it was for chap1.pas and is illustrated in the following examples.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
~$ ./chap1}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 3$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 4+7$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
11}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\cf17\kerning0\dbch\af9\loch
Assignment is done via the }{\loch\cf17\b\kerning0\dbch\af9\loch
:=}{\loch\cf17\kerning0\dbch\af9\loch
 operator.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x:=4$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
4}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x+x$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
8}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> print x$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
4}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
4}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> y:=5$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
5}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> seq print x; print y; x*y qes$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
4}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
5}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
20}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> if y>0 then 5 else 10 fi$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
5}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> while y>0 do}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>    seq x:=x+x; y:=y-1 qes}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>  od$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
0}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
128}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun #1 (x) := x + 1 nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
#1}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> #1(4)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
5}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun double(x):=x+x nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
double}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> double(4)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
8}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
128}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun setx(x,y):= seq x:=x+y; x qes nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
setx}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> setx(x,1)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
129}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
128}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs17\kerning0\loch
-> fun not(boolval):= if boolval then 0 else 1 fi nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
not}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf18\fs21\kerning0\f4\dbch\af9\loch
<> cannot be a function name since <, > are now delimiters.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun <> (x, y):= not(x=y) nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mutate: found <  where nameid or funid is expected.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\cf18\kerning0\dbch\af9\loch
# is not a delimiter and can be used in a name.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun ## (x,y):= not(x=y) nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
##}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun mod(m,n):=m-n*(m/n)nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mod}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun gcd(m,n):=}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>    seq}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>      r:=mod(m,n);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>      while ##(r,0) do}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>        seq}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>          m:=n;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>          n:=r;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>          r:=mod(m,n)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>        qes}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>      od;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>      n}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>    qes}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>  nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
gcd}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> gcd(6,15)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun gcd(m,n):=}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
>    if n=0 then m else gcd(n,mod(m,n)) fi nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
gcd}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> gcd(6,15)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\cf19\kerning0\dbch\af9\loch
Normal operator precedence and associativity are implemented. }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 5*3+7$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
22}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 5+3*7$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
26}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 14-7-3$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
4}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 48/12/2$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
2}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\cf18\kerning0\dbch\af9\loch
Keywords cannot be redefined.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun if (x) := x+5 nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mutate: found if  where nameid or funid is expected.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\cf18\kerning0\dbch\af9\loch
Keywords cannot be reused as variable names.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> if := 20$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Error parsing expr.  Found := where one of the following is expected: "if", "while", "seq", "print", nameid, funid, number, or "("}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf18\fs21\kerning0\f4\dbch\af9\loch
Names are any sequence of chars not a }{\hich\af4\loch\cf18\fs21\kerning0\f4\dbch\af9\loch
number}{\hich\af4\loch\cf18\fs21\kerning0\f4\dbch\af9\loch
 and not containing a delimiter.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> ~12#ab:=25$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> ~12#ab$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> x:=15-~12#ab+7$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\cf19\kerning0\dbch\af9\loch
A string of digits is not a valid name.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun 222 (x):= x+22 nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mutate: found 222  where nameid or funid is expected.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun 2#2 (x):=x+22 nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
2#2}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> 2#2(33)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
55}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> a:=55-2#2(33)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
0}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\cf19\kerning0\dbch\af9\loch
Inserting a delimiter in a name confuses the parser and causes erroneous results.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> a(b:=25$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Undefined variable: a}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
Function name may not be reused as a variable name.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> fun inc10 (x) := x+10 nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
inc10}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> inc10 := 50$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Error in match. Found :=  where ( is expected.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
Multiple assignment. }{\hich\af4\loch\cf19\fs21\b\kerning0\f4\dbch\af9\loch
:= }{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
is the only right associative operator.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> i:=j:=k:=25$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> i$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> j$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> k$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
25}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
New load from file commands are illustrated below. }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
They must be entered on a single input line. The $ end of input marker may be omitted since it is appended by the program.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
load echoes the text read from the file. }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> )load mod.txt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Current Directory is : /home/dawsond/pascal/proglang/chap1}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
Loading file : mod.txt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
fun mod(m,n):=}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
m-n*(m/n)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mod}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\hich\af4\loch\cf19\fs21\kerning0\f4\dbch\af9\loch
sload (silent load) does not echo the text read.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> )sload not.txt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Current Directory is : /home/dawsond/pascal/proglang/chap1}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
Loading file : not.txt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
not}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
-> )load gcd_only.txt$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
Current Directory is : /home/dawsond/pascal/proglang/chap1}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
Loading file : gcd_only.txt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
fun gcd(m,n):=}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
seq}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
  }{\loch\kerning0\loch
r:=mod(m,n);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
  }{\loch\kerning0\loch
while not(r=0) do}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
   }{\loch\kerning0\loch
seq}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
    }{\loch\kerning0\loch
m:=n;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
    }{\loch\kerning0\loch
n:=r;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
    }{\loch\kerning0\loch
r:=mod(m,n)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
   }{\loch\kerning0\loch
qes}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
  }{\loch\kerning0\loch
od;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
  }{\loch\kerning0\loch
n}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0
 }{\loch\kerning0\loch
qes}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
nuf$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
gcd}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
gcd(51,34)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
17}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
gcd(225,300)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
75}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mod(10,7)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
mod(100,50)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
0}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
not(3)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
0}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
not(0)$}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\loch
1}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\pagebb\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\b\kerning0\dbch\af9\loch
Section 3. Program organization, Translation Considerations and Program Changes}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Part 1. Program Organization}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The main program is a Read-Eval-Print-Loop (REPL) which reads user input, parses it, evaluates it, prints its value then returns to the beginning of the loop.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9
 }{\loch\kerning0\dbch\af9\loch
If an error occurs then the errmsg() function displays error information and calls longjmp() to return to the main program and restart the REPL. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The code is still organized as it was in the Pascal version with the main function at the bottom of the file and the other functions listed in the same order under the following sections: DECLARATIONS, DATA STRUCTURE OPS, NAME MANAGEMENT, INPUT, NEW PARSING ROUTINES, ENVIRONMENTS, NUMBERS, EVALUATION.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Lower-level functions are still, for the most part, defined before higher-level ones that call them which helps reduce the need for forward declarations. For example, consider the grammar rules for expressions and their associated function prototypes in the following table. The rules are presented in a top-down, recursive-descent order but the corresponding functions are in reverse, bottom-up order from the lowest-level function to the highest. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \trowd\trql\trleft60\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\clbrdrt\brdrs\brdrw15\brdrcf1\clpadfl3\clpadl29\clbrdrl\brdrs\brdrw15\brdrcf1\clpadft3\clpadt29\clbrdrb\brdrs\brdrw15\brdrcf1\clpadfb3\clpadb29\clpadfr3\clpadr29\clvertalt\cellx5816\clbrdrt\brdrs\brdrw15\brdrcf1\clpadfl3\clpadl29\clbrdrl\brdrs\brdrw15\brdrcf1\clpadft3\clpadt29\clbrdrb\brdrs\brdrw15\brdrcf1\clpadfb3\clpadb29\clbrdrr\brdrs\brdrw15\brdrcf1\clpadfr3\clpadr29\clvertalt\cellx11571\pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Top-Down Order of Grammar Rules.}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
expr \uc2 \u8722\'81\'7c\u8594\'81\'a8 ifex | whileex | seqex | \uc1 }{\loch\cf18\b\kerning0\dbch\af9\loch
exp1}{\loch\cf18\kerning0\dbch\af9\loch
 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\cf18\b\kerning0\dbch\af9\loch
exp1}{\loch\cf18\kerning0\dbch\af9\loch
 }{\loch\kerning0\dbch\af9\loch
\uc2 \u8722\'81\'7c\u8594\'81\'a8 exp2 [ :=  exp1 ]*\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
exp2 \uc2 \u8722\'81\'7c\u8594\'81\'a8 [ prtop ] exp3\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
exp3 \uc2 \u8722\'81\'7c\u8594\'81\'a8 exp4 [ relop exp4 ]*\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
exp4 \uc2 \u8722\'81\'7c\u8594\'81\'a8 exp5 [ addop exp5 ]*\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
exp5 \uc2 \u8722\'81\'7c\u8594\'81\'a8 [ addop ] exp6 [ mulop exp6 ]*\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
exp6 \uc2 \u8722\'81\'7c\u8594\'81\'a8 name | \uc1 }{\loch\kerning0\dbch\af9\loch
number}{\loch\kerning0\dbch\af9\loch
 | funcall | ( }{\loch\cf18\b\kerning0\dbch\af9\loch
expr}{\loch\kerning0\dbch\af9\loch
 )}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch
\cell\pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Bottom-Up Order of Functions in Source Code}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp6:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp5:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp4:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp3:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp2:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExp1:EXP;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\kerning0\dbch\af9\loch
function parseExpr;}
\par \pard\plain \s38\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\nowidctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch
\cell\row\pard \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
So to obtain a top-down view of the program logic, it may be best to read the NEW PARSING ROUTINES and other sections from the bottom up, after reviewing the DECLARATIONS section. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Part 2. Translation of Structure Pointers using Typedef}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The *REC names in the Pascal version are only used to declare the REC structure type and to obtain a pointer to it.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
For example, we have the following.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\hich\af7\loch\fs16\kerning0\f7\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\cf1\fs16\kerning0
 }{\loch\cf1\fs16\kerning0\loch
EXPLIST =}{\loch\fs16\kerning0\loch
 ^}{\loch\cf20\fs16\b\kerning0\loch
EXPLISTREC}{\loch\fs16\kerning0\loch
;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
 }{\loch\cf20\fs16\b\kerning0\loch
EXPLISTREC}{\loch\fs16\kerning0\loch
 }{\loch\cf1\fs16\kerning0\loch
= record}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
                  }{\loch\fs16\kerning0\loch
head: EXP;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
                  }{\loch\fs16\kerning0\loch
tail: EXPLIST}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
              }{\loch\fs16\kerning0\loch
END;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0\loch
FUNCTION mkExplist (e: EXP; el: EXPLIST): EXPLIST;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
    }{\loch\fs16\kerning0\loch
var newel: EXPLIST;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0\loch
BEGIN}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
    }{\loch\fs16\kerning0\loch
new(newel);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
    }{\loch\fs16\kerning0\loch
newel^.head = e;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
    }{\loch\fs16\kerning0\loch
newel^.tail = el;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0
    }{\loch\fs16\kerning0\loch
mkExplist = newel}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\loch\fs16\kerning0\loch
END; /* mkExplist */}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
EXPLISTREC is not used anywhere else except in the above red text.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0{\loch\kerning0\dbch\af9\loch
EXPLIST is used throughout the program to declare variables, arguments, function return types.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
There is a debate at }{{\field{\*\fldinst HYPERLINK "http://stackoverflow.com/questions/252780/why-should-we-typedef-a-struct-so-often-in-c" }{\fldrslt {\loch\loch\cf9\ul\ulc0\kerning0\dbch\af9\cf9\ul\ulc0\kerning0\dbch\af9\loch
http://stackoverflow.com/questions/252780/why-should-we-typedef-a-struct-so-often-in-c}{}}}\loch\kerning0\dbch\af9\loch
 about whether or not typedef should be used in C.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
I decided to use it and rewrite the above Pascal code as shown below in the middle column. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
I like the cleaner look and that it made it easier to visually confirm that my C code is equivalent to the Pascal code.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
If I did not use typedef then the C code would be written as shown in the last column below. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \trowd\trql\trleft15\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\clbrdrt\brdrs\brdrw10\brdrcf1\clpadfl3\clpadl55\clbrdrl\brdrs\brdrw10\brdrcf1\clpadft3\clpadt55\clbrdrb\brdrs\brdrw10\brdrcf1\clpadfb3\clpadb55\clpadfr3\clpadr55\clvertalt\cellx5055\clbrdrt\brdrs\brdrw10\brdrcf1\clpadfl3\clpadl55\clbrdrl\brdrs\brdrw10\brdrcf1\clpadft3\clpadt55\clbrdrb\brdrs\brdrw10\brdrcf1\clpadfb3\clpadb55\clpadfr3\clpadr55\clvertalt\cellx10095\clbrdrt\brdrs\brdrw10\brdrcf1\clpadfl3\clpadl55\clbrdrl\brdrs\brdrw10\brdrcf1\clpadft3\clpadt55\clbrdrb\brdrs\brdrw10\brdrcf1\clpadfb3\clpadb55\clbrdrr\brdrs\brdrw10\brdrcf1\clpadfr3\clpadr55\clvertalt\cellx15135\pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\b\kerning0\loch
Pascal Code}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
EXPLIST = ^EXPLISTREC;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
EXPLISTREC = record}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
               }{\loch\fs16\kerning0\loch
head: EXP;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
               }{\loch\fs16\kerning0\loch
tail: EXPLIST}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
             }{\loch\fs16\kerning0\loch
END;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
FUNCTION mkExplist (e: EXP; el: EXPLIST): EXPLIST;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
var newel: EXPLIST;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
BEGIN}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
new(newel);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel^.head = e;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel^.tail = el;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
mkExplist = newel}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
END; /* mkExplist */}\cell\pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\b\kerning0\loch
C Code with typedef}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
struct EXPLISTREC \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
EXP head;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
struct EXPLISTREC *tail;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
\};}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
typedef struct EXPLISTREC* EXPLIST;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
     }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
EXPLIST mkExplist (EXP e, EXPLIST el)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
\{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
EXPLIST newel;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel = }{\loch\fs14\kerning0\loch
(EXPLIST) }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs14\kerning0
            }{\loch\fs16\kerning0\loch
malloc(sizeof(struct EXPLISTREC));}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel->head = e;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel->tail = el;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
return newel;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
\}; /* mkExplist */}\cell\pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\b\kerning0\loch
C code without typedef}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
struct EXPLISTREC *mkExplist (EXP e, }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
                              }{\loch\fs16\kerning0\loch
struct }{\loch\fs14\kerning0\loch
EXPLISTREC}{\loch\fs16\kerning0\loch
 *el)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
\{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
struct EXPLISTREC *newel;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\loch\fs16\kerning0\dbch\langfe1033\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel = (struct EXPLISTREC *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
          }{\loch\fs16\kerning0\loch
malloc(sizeof(struct }{\loch\fs14\kerning0\loch
EXPLISTREC}{\loch\fs16\kerning0\loch
));}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel->head = e;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
newel->tail = el;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0
  }{\loch\fs16\kerning0\loch
return newel;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\loch\fs16\kerning0\loch
\}; /* mkExplist */}\cell\row\pard \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\i\b\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Part 3. Translation of Pascal Variant Record using C Union}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Expressions may be of type number (integer constant), variable or application (of a function or operator). }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The Pascal variant record structure that was used to store expressions will now be represented with a C union construct as shown below. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \trowd\trql\trleft-98\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\clbrdrt\brdrs\brdrw10\brdrcf1\clbrdrl\brdrs\brdrw10\brdrcf1\clpadft3\clpadt108\clbrdrb\brdrs\brdrw10\brdrcf1\clbrdrr\brdrs\brdrw10\brdrcf1\clpadfr3\clpadr108\clvertalt\cellx7461\clbrdrt\brdrs\brdrw10\brdrcf1\clbrdrl\brdrs\brdrw10\brdrcf1\clpadft3\clpadt108\clbrdrb\brdrs\brdrw10\brdrcf1\clbrdrr\brdrs\brdrw10\brdrcf1\clpadfr3\clpadr108\clvertalt\cellx15020\pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Pascal Variant Record}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
EXPTYPE = (VALEXP,VAREXP,APEXP);\line    EXPREC = record\line                case etype: EXPTYPE of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                   VALEXP: (num: NUMBER);\line                   VAREXP: (varble: NAME);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                   APEXP: (optr: NAME; }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi2520\li0\lin0\ri0\rin0{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
args: EXPLIST)\line               end;\line }\cell\pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
C Union}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
enum EXPTYPE \{VALEXP,VAREXP,APEXP\};\line struct EXPREC \{\line     enum EXPTYPE etype;\line     union \{\line         NUMBER num;\line         NAME varble;\line         struct \{\line             NAME optr;\line             EXPLIST args;\line         \} ap;\line     \} u;\line \};}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\intbl\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch
\cell\row\pard \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\pagebb\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Part 4. Translation of Pascal Sets}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
The following Pascal sets were defined.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\hich\af7\loch\lang1081\kerning0\f7\dbch\langfe2052\loch
addop, mulop, relop:set of token; // sets of operators}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
And they were initialized in initParse as follows.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
addop = [addsy,subsy];}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
mulop = [mulsy,divsy];}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
relop = [lssy,eqsy,gtsy];}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
For the C conversion, I replaced tests for set membership like the following}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\langfe2052\loch
if toksy in mulop then}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
with tests of the specific values as follows.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\fi0\li709\lin709\ri0\rin0\ltrpar{\rtlch\af11\afs18 \ltrch\lang1081\langfe2052\hich\af7\loch\fs18\lang1081\kerning0\f7\dbch\af9\langfe2052\loch
if (toksy == mulsy || toksy == divsy)}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Part 5. Translation of Pascal eoln() and eof()}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Functions eoln() and eof() were replaced with booleans named eoln and eof respectively.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
These booleans are set to true in the nexchar() function as eoln and eof conditions are encountered.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Part 6. Scattered gotos replaced single longjmp()}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
In the Pacal version, the Read-Eval-Print-Loop (REPL) was preceded by label 99. Each error message was followed by a \uc2 \u8220\'81\'67goto 99\u8221\'81\'68 statement. Then the REPL would restart.\uc1 }
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
In the C version, a call to setjmp() replaces label 99 prior to the REPL. All error messages are now inside an errmsg() function which calls longjmp() at the end to return to the setjmp location and restart the REPL. }
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Part 7. Space-padded strings replaced with null-terminated strings}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
The printNames array is used to store the names of all operators, variables and functions.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
In the Pascal version, all such names are padded with trailing spaces to a length of 20 characters. In the C version, the trailing spaces are omitted and the names are null-terminated. }
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
So all the loops that compared and inserted trailing spaces in the Pascal version have been removed in C version.}
\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s36\rtlch\alang1081 \ltrch\langfe1081\hich\af4\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f4\fs21\kerning1\dbch\af8\langfe1081\ql\ltrpar{\loch\kerning0\dbch\af9\loch
Part 8. Side by Side Comparison of Pascal vs C source code}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
Pascal code is in column 1 and corresponding C code is in column 2 of the table below. }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
The formatting differs from the actual source code in places due to adjusting spacing or moving lines so that corresponding source lines are side by side.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
I added some clarifying comments in bold blue text below which are not contained in the actual source code.}
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0{\loch\kerning0\dbch\af9\loch
They are prefixed by my initials and a colon. Search for \uc2 \u8220\'81\'67DD:\u8221\'81\'68 to read them.\uc1 }
\par \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\b\kerning0\dbch\af9\langfe1033\loch

\par \trowd\trql\trleft-15\ltrrow\trrh1656\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\clbrdrt\brdrs\brdrw15\brdrcf1\clpadfl3\clpadl29\clbrdrl\brdrs\brdrw15\brdrcf1\clpadft3\clpadt29\clbrdrb\brdrs\brdrw15\brdrcf1\clpadfb3\clpadb29\clpadfr3\clpadr29\clvertalt\cellx7543\clbrdrt\brdrs\brdrw15\brdrcf1\clpadfl3\clpadl29\clbrdrl\brdrs\brdrw15\brdrcf1\clpadft3\clpadt29\clbrdrb\brdrs\brdrw15\brdrcf1\clpadfb3\clpadb29\clbrdrr\brdrs\brdrw15\brdrcf1\clpadfr3\clpadr29\clvertalt\cellx15101\pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(*****************************************************************\line  *                     DECLARATIONS                              *\line  *****************************************************************)\line PROGRAM chapter1 (input, output);\line \line Uses sysutils;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
label 99;                                                                   \line \line CONST\line  NAMELENG = 20;      (* Maximum length of a name *)                        \line  }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
MAXNAMES = 100;     (* Maximum number of different names *)\line  MAXINPUT = 500;     (* Maximum length of an input *)\line \line  }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
CMDLENG = 8;       (* Maximum length of a command name *)\line  NUMCMDS = 2;       (* Number of commands currently defined *)\line  ARGLENG = 40;      (* Maximum length of a command argument *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line  PROMPT = '-> ';     (* Initial prompt *)\line  PROMPT2 = '> ';     (* continuation prompt *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
TABCODE = 9;\line  LINEFEED = 10;\line  CR = 13;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
COMMENTCHAR = '!';\line  DOLLAR = '$'; (*marks end of expr or fundef input by the user*)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line TYPE\line    NAMESIZE = 0..NAMELENG;\line    NAMESTRING = packed array [1..NAMELENG] of char;\line    NAME = 1 .. MAXNAMES; (* a NAME is an index in printNames *) }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line  CMDSIZE = 0..CMDLENG;\line  CMDSTRING=packed array [1..CMDLENG] of char;\line  CMD = 1..NUMCMDS;     (* a CMD is an index in printCmds *)\line \line  NUMBER = integer;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
ARGSIZE = 0..ARGLENG;\line  ARGSTRING = packed array [1..ARGLENG] of char;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line  BUILTINOP =  (IFOP,WHILEOP,ASSIGNOP,SEQOP,ADDOP,SUBOP,MULOP,DIVOP,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
EQOP,LTOP,GTOP,PRINTOP);\line  VALUEOP = ADDOP .. PRINTOP;\line  CONTROLOP = IFOP .. SEQOP;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Below are symbolic names for each token. They are stored in the}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
toktable array at the same index as the corresponding token in the}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
printNames array by the initNames() & install() functions.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line  TOKEN = nameidsy,numsy,funidsy,ifsy,thensy,elsesy,fisy,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
whilesy,dosy,odsy,seqsy,qessy,funsy,nufsy,assignsy,rparsy,\line lparsy,semsy,comsy,addsy,subsy,mulsy,divsy,eqsy,lssy,\line gtsy,printsy,quitsy,dollarsy);\line \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
EXP = ^EXPREC;\line    EXPLIST = ^EXPLISTREC;\line    ENV = ^ENVREC;\line    VALUELIST = ^VALUELISTREC;\line    NAMELIST = ^NAMELISTREC;\line    FUNDEF = ^FUNDEFREC;\line \line    EXPTYPE = (VALEXP,VAREXP,APEXP);\line    EXPREC = record\line                case etype: EXPTYPE of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                   VALEXP: (num: NUMBER);\line                   VAREXP: (varble: NAME);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                   APEXP: (optr: NAME; }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2520\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
args: EXPLIST)\line               end;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2520\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    EXPLISTREC = record\line                head: EXP;\line                tail: EXPLIST\line             end;\line \line    VALUELISTREC = record\line                head: NUMBER;\line                tail: VALUELIST\line             end;\line \line    NAMELISTREC = record\line                head: NAME;\line                tail: NAMELIST\line             end;\line \line    ENVREC = record\line                vars: NAMELIST;\line                values: VALUELIST\line             end;\line \line    FUNDEFREC = record\line                funname: NAME;\line                formals: NAMELIST;\line                body: EXP;\line                nextfundef: FUNDEF\line             end;\line \line var\line    fundefs: FUNDEF;\line    numval:NUMBER;\line    globalEnv: ENV;\line    currentExp: EXP;\line \line    punctop: set of char;    (* set of punctuation & operator chars *)\line \line    userinput: array [1..MAXINPUT] of char;\line    inputleng, pos: 0..MAXINPUT;\line \line    printNames: array [NAME] of NAMESTRING;\line    printCmds:array [CMD] of CMDSTRING;\line \line    tokstring:NAMESTRING;  (* string & length for display in error msgs *)\line    tokleng:NAMESIZE;\line \line    infilename:ARGSTRING;\line    infile:text;    (* file variable for input source file *)\line \line    load,sload:CMD;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    numNames, numBuiltins, tokindex, mulsy_index: NAME;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    toksy: TOKEN;   (* current token returned from getToken or install *)\line    toktable: array [NAME] of TOKEN; (*holds symbolic name of each token \line                                             in printNames array. Corresponding\line                                             toktable & printNames entries have}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
                                            }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
same index. *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    addops,mulops,relops:set of token;  (* sets of operators *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    quittingtime,\line    dollarflag,  (* true = $ was input. $ marks end of current expr or\line                      fundef being input *)\line    echo,         (* true = echo characters during a load command *)\line    readfile:boolean; (* true if an input file is being loaded *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (*****************************************************************\line  *                     DATA STRUCTURE OP'S                       *\line  *****************************************************************)\line \line (* mkVALEXP - return an EXP of TYPE VALEXP with num n            *)\line function mkVALEXP (n: NUMBER): EXP;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var e: EXP;\line begin\line    new(e);\line    e^.etype := VALEXP;\line    e^.num := n;\line    mkVALEXP := e\line end; (* mkVALEXP *)\line \line (* mkVAREXP - return an EXP of TYPE VAREXP with varble nm        *)\line function mkVAREXP (nm: NAME): EXP;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var e: EXP;\line begin\line    new(e);\line    e^.etype := VAREXP;\line    e^.varble := nm;\line    mkVAREXP := e\line end; (* mkVAREXP *)\line \line (* mkAPEXP - return EXP of TYPE APEXP w/ optr op and args el     *)\line function mkAPEXP (op: NAME; el: EXPLIST): EXP;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var e: EXP;\line begin\line    new(e);\line    e^.etype := APEXP;\line    e^.optr := op;\line    e^.args := el;\line    mkAPEXP := e\line end; (* mkAPEXP *)\line \line (* mkExplist - return an EXPLIST with head e and tail el         *)\line function mkExplist (e: EXP; el: EXPLIST): EXPLIST;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var newel: EXPLIST;\line begin\line    new(newel);\line    newel^.head := e;\line    newel^.tail := el;\line    mkExplist := newel\line end; (* mkExplist *)\line \line (* mkNamelist - return a NAMELIST with head n and tail nl        *)\line function mkNamelist (nm: NAME; nl: NAMELIST): NAMELIST;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var newnl: NAMELIST;\line begin\line    new(newnl);\line    newnl^.head := nm;\line    newnl^.tail := nl;\line    mkNamelist := newnl\line end; (* mkNamelist *)\line \line (* mkValuelist - return an VALUELIST with head n and tail vl     *)\line function mkValuelist (n: NUMBER; vl: VALUELIST): VALUELIST;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var newvl: VALUELIST;\line begin\line    new(newvl);\line    newvl^.head := n;\line    newvl^.tail := vl;\line    mkValuelist := newvl\line end; (* mkValuelist *)\line \line (* mkEnv - return an ENV with vars nl and values vl              *)\line function mkEnv (nl: NAMELIST; vl: VALUELIST): ENV;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var rho: ENV;\line begin\line    new(rho);\line    rho^.vars := nl;\line    rho^.values := vl;\line    mkEnv := rho\line end; (* mkEnv *) \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* lengthVL - return length of VALUELIST vl                      *)\line function lengthVL (vl: VALUELIST): integer;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var i: integer;\line begin\line    i := 0;\line    while vl <> nil do begin\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
      }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
i := i+1;\line       vl := vl^.tail\line    end;\line    lengthVL := i\line end; (* lengthVL *)\line \line (* lengthNL - return length of NAMELIST nl                       *)\line function lengthNL (nl: NAMELIST): integer;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var i: integer;\line begin\line    i := 0;\line    while nl <> nil do begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       i := i+1;\line       nl := nl^.tail\line    end;\line    lengthNL := i\line end; (* lengthNL *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (*****************************************************************\line  *                     NAME MANAGEMENT                           *\line  *****************************************************************)\line \line (* fetchDef - get function definition of fname from fundefs      *)\line function fetchDef (fname: NAME): FUNDEF;\line var\line    f: FUNDEF;\line    found: Boolean;\line begin\line    found := false;\line    f := fundefs;\line    while (f <> nil) and not found do\line       if f^.funname = fname\line       then found := true\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
      }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
else f := f^.nextfundef;\line    fetchDef := f\line end; (* fetchDef *)\line \line (* newDef - add new function fname w/ parameters nl, body e   *)\line procedure newDef (fname: NAME; nl: NAMELIST; e: EXP);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
var f: FUNDEF;\line begin\line    f := fetchDef(fname);\line    if f = nil (* fname not yet defined as a function *)\line    then begin\line            new(f);\line            f^.nextfundef := fundefs; (* place new FUNDEFREC *)\line            fundefs := f                      (* on fundefs list *)\line         end;\line    f^.funname := fname;\line    f^.formals := nl;\line    f^.body := e\line end; (* newDef *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* initNames - place all pre-defined names into printNames\line                and corresponding token symbols in toktable. *)\line \line procedure initNames;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line var i: integer;\line begin\line    fundefs := nil;\line    i := 1;\line    printNames[i]:= 'if                  '; toktable[i]:=ifsy;     i:=i+1;\line    printNames[i]:= 'while               '; toktable[i]:= whilesy; i:=i+1;\line    printNames[i]:= ':=                  '; toktable[i]:= assignsy; i:=i+1;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
printNames[i]:= 'seq                 '; toktable[i] := seqsy;   i:= i+1;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
printNames[i]:= '+                   '; toktable[i] := addsy;    i:= i+1;\line    printNames[i]:= '-                   '; toktable[i] := subsy;    i:= i+1;\line \line (* To handle negative numbers (unary minus), we build an expr with the multiply operator and operand -1. Below we save the multiply symbol index for this purpose. This avoids a lookup later to obtain the index. *)\line \line    mulsy_index:=i;\line    printNames[i] := '*                   '; toktable[i] := mulsy;   i := i+1;\line    printNames[i] := '/                   '; toktable[i] := divsy;   i := i+1;\line    printNames[i] := '=                   '; toktable[i] := eqsy;    i := i+1;\line    printNames[i] := '<                   '; toktable[i] := lssy;    i := i+1;\line    printNames[i] := '>                   '; toktable[i] := gtsy;    i := i+1;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
printNames[i] := 'print               '; toktable[i] := printsy; i := i+1;\line    printNames[i] := 'quit                '; toktable[i] := quitsy;  i := i+1;\line    printNames[i] := 'then                '; toktable[i] := thensy;  i := i+1;\line    printNames[i] := 'else                '; toktable[i] := elsesy;  i := i+1;\line    printNames[i] := 'fi                  '; toktable[i] := fisy;    i := i+1;\line    printNames[i] := 'do                  '; toktable[i] := dosy;    i := i+1;\line    printNames[i] := 'od                  '; toktable[i] := odsy;    i := i+1;\line    printNames[i] := 'qes                 '; toktable[i] := qessy;   i := i+1;\line    printNames[i] := 'fun                 '; toktable[i] := funsy;   i := i+1;\line    printNames[i] := 'nuf                 '; toktable[i] := nufsy;   i := i+1;\line    printNames[i] := '(                   '; toktable[i] := lparsy;  i := i+1;\line    printNames[i] := ')                   '; toktable[i] := rparsy;  i := i+1;\line    printNames[i] := ';                   '; toktable[i] := semsy;   i := i+1;\line    printNames[i] := ',                   '; toktable[i] := comsy;   i := i+1;\line    printNames[i] := '$                   '; toktable[i] := dollarsy; \line    numNames := i;\line    numBuiltins := i\line end; (* initNames *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* initCmds -  place all pre-defined commands into printCmds  *)\line procedure initCmds;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line var i: integer;\line begin\line    i := 1;\line    printCmds[i] := 'sload   '; sload  := i; i := i+1;\line    printCmds[i] := 'load    '; load   := i; i := i+1;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* printCmds[i] := 'xxxxxx  '; xxxxxx := i; i := i+1; *)\line end;  (* of initCmds *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* prName - print name nm                                        *)\line procedure prName (nm: NAME);\line var i: integer;\line begin\line    i := 1;\line    while i <= NAMELENG\line    do if printNames[nm][i] <> ' '\line       then begin\line               write(printNames[nm][i]);\line               i := i+1\line            end\line       else i := NAMELENG+1  (* exit while loop *)\line end; (* prName *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* install - insert new name into printNames                     *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
function install (nm: NAMESTRING): NAME;\line var\line    i: integer;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    found: Boolean;\line begin\line    i := 1; }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
found := false;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    while (i <= numNames) and not found\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
do if nm = printNames[i]\line       then found := true}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       else i := i+1;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    if not found\line    then begin\line            if i > MAXNAMES\line            then begin\line                    writeln('No more room for names');\line                    goto 99\line                 end;\line            numNames := i;\line            printNames[i] := nm;\line            toktable[i] := nameidsy\line         end;\line    toksy := toktable[i];   (* return token symbol in global var *)\line    install := i\line end; (* install *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* initParse - initialization of variables *)\line procedure initParse;\line \line begin\line   initCmds;\line   readfile:=false;\line   echo := false;\line   addops := [addsy,subsy];\line   mulops := [mulsy,divsy];\line   relops := [lssy,eqsy,gtsy];\line   punctop := ['(', ')', '+', '-', '*', '/', ':', '=', '<', '>', ';', ',', '$', COMMENTCHAR];\line end;\line \line (* primOp - translate NAME optr to corresponding BUILTINOP       *)\line function primOp (optr: NAME): BUILTINOP;\line var\line    op: BUILTINOP;\line    i: integer;\line begin\line    op := IFOP; (* N.B. IFOP is first value in BUILTINOPS *)\line    for i := 1 to optr-1 do op := succ(op);\line    primOp := op\line end; (* primOp *)\line \line (*****************************************************************\line  *                        INPUT                                              *\line  *****************************************************************)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: The functions parseCmd, parseName and isNumber each call the isDelim function below. parseCmd and parseName read chars until a delimiter is encountered in order to obtain the command/variable/function name. isNumber reads digits until a nondigit is encountered and requires that the nondigit be a delimiter for the number to be valid. Digits followed by non-delimiter chars are treated as names of variables or functions.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* isDelim - check if c is a delimiter                           *)\line function isDelim (c:char): Boolean;\line begin\line   isDelim := (c = ' ') or (c in punctop)\line end;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* skipblanks - return next non-blank position in userinput      *)\line function skipblanks (p: integer): integer;\line begin\line    while userinput[p] = ' ' do p := p+1;\line    skipblanks := p\line end; (* skipblanks *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* reader - read char's into userinput; be sure input not blank  *)\line procedure reader;\line \line (* readInput - read char's into userinput                        *)\line    procedure readInput;\line \line    var c: char;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: New code was added to the nextchar function below to deal with reading input chars from a file instead of the terminal.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* nextchar - read next char - filter tabs and comments. Also filter CR/LF which were returned in input stream under WSL/Cygwin. *)\line       procedure nextchar (var c: char);\line       begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fahang\fi90\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          if readfile then\line            begin\line              read(infile,c);  (* read file *)\line              if eof(infile) then\line                begin\line                  readfile:=false;\line                  echo:=false;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fahang\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fahang\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (*\line The next line below assigns a '$' to c to mark the end of the input.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fahang\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
This causes the main prompt to be displayed. Displaying the continuation prompt at EOF is undesirable because it would prohibit the user from entering another load command since such commands are only checked for\line in response to the main prompt.\line *)\line                  c := DOLLAR;\line                  CLOSE(infile)\line                end;\line              if echo then write(c);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line            end\line          else\line            read(c);  (* read standard input *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* Replace tab and eoln chars with space, skip comments *)\line          if (c = chr(TABCODE)) or (c = chr(LINEFEED)) or (c = chr(CR))\line          then c := ' '\line          else if c = COMMENTCHAR then\line               begin \line                 if readfile then}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                   while not eoln(infile) do\line                     begin\line                       read(infile,c);\line                       if echo then write(c)  (*echo comment *)\line                     end                                                          \line                 else\line                   while not eoln do read(c);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                 c := ' '   (* replace eoln char *)\line               end}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       end; (* nextchar *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: The readDollar function below replaces readParens.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
readInput used to call readParens to read chars until a closing right parenthesis was entered which marked the end of the current expr or fundef.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
Now readDollar is used to read until a dollar sign is entered which marks the completion of the current input.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* readDollar - read char's, ignoring newlines, till '$' is read  *)\line (*              '$' marks end of the fundef or expr that is being input *)\line       procedure readDollar;\line       var\line          c: char;\line       begin\line          c := ' ';\line          repeat}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             if not readfile and eoln then write(PROMPT2);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             nextchar(c);\line             pos := pos+1;\line             if pos = MAXINPUT\line             then begin\line                     writeln('User input too long');\line                     goto 99\line                  end;\line             userinput[pos] := c\line          until c = dollar;\line          dollarflag := true;\line       end; (* readDollar *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: The next four functions, readCmd, parseCmd, parseCmdArg and processCmd handle reading, parsing and executing the new load and sload commands. If readInput detects a right parenthesis as first character of the input line then it calls processCmd (which calls the others) to open the file and set readfile to true. While readfile is true, the nextchar function will read input chars from the opened file instead of the terminal.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* readCmd - read command line into userinput buffer for processing. *)\line procedure readCmd;\line var\line  c:char;\line begin\line   c := ' ';\line   while not eoln do  (* commands are assumed to be entered on one line *)\line     begin\line       pos:=pos+1;\line       nextchar(c);\line       userinput[pos]:=c;\line     end;\line \line   inputleng:=pos;\line   if userinput[inputleng] = DOLLAR then\line      inputleng := inputleng - 1;  (* exclude $ from command line, if any *)\line (* \line   Next read removes the LF (under WSL) or CR (under Cygwin)\line   that follows the $ in the input stream so it is not\line   accepted as input once the main prompt is displayed\line *)\line   read(c)\line end; (* of readCmd *)\line \line (* parseCmd - return Cmd starting at userinput[pos] *)\line function parseCmd: CMD;\line var\line    nm: CMDSTRING; (* array to accumulate characters *)\line    leng: CMDSIZE; (* length of CMD *)\line    i:integer;\line    found: Boolean;\line \line begin\line    nm[1] := #0;\line    leng := 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    while (pos < inputleng) and not isDelim(userinput[pos])\line    do begin\line          if leng = CMDLENG\line          then begin\line                  writeln('Command Name too long, begins: ', nm);\line                  goto 99\line               end;\line          leng := leng+1;\line          nm[leng] := userinput[pos];\line          pos := pos+1\line       end;\line \line    if leng = 0\line    then begin\line            writeln('Error: expected Command name, instead read: ',\line                    userinput[pos]);\line            goto 99\line         end;\line    for leng := leng+1 to CMDLENG do nm[leng] := ' ';\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    i := 1; }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
found := false;\line    while (i <= NUMCMDS) and not found\line    do}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi450\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if nm = printCmds[i]}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi450\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       then found := true}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi450\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       else i := i+1;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    if not found then\line      begin\line        writeln('Unrecognized Command Name  begins: ',nm);\line        goto 99\line      end;\line \line    pos := skipblanks(pos); (* skip blanks after command name *)\line    parseCmd := i;\line end; (* parseCmd *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* parseCmdArg - return the character string argument starting at userinput[pos]. This function is currently used to parse the filename argument from the load & sload commands *)\line function parseCmdArg: ARGSTRING;\line var\line    nm: ARGSTRING; (* array to accumulate characters *)\line    leng: ARGSIZE; (* length of name *)\line begin\line    nm[1] := #0;\line    leng := 0;\line    while (pos <= inputleng) and not (userinput[pos] = ' ')\line    do begin\line          if leng = ARGLENG\line          then begin\line                  writeln('Argument name too long, begins: ', nm);\line                  goto 99\line               end;\line          leng := leng+1;\line          nm[leng] := userinput[pos];\line          pos := pos+1\line       end;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    if leng = 0\line    then begin\line            writeln('Error: expected argument name, instead read: ',\line                    userinput[pos]);\line            goto 99\line         end;\line    for leng := leng+1 to ARGLENG do nm[leng] := ' ';\line    parseCmdArg := nm\line end; (* parseCmdArg *)\line \line (* processCmd - input, parse, and execute the command *)\line procedure processCmd;\line var\line    i,j: integer;\line    cmdnm:CMD;  (* cmdnm is an index to printCmds *)\line begin\line    readCmd;\line    pos:=skipblanks(1);     (* get pos of ")" which begins each command *)\line    pos:=skipblanks(pos+1); (* get pos of 1st letter of command name *)\line    cmdnm:=parseCmd;\line    if (cmdnm = sload) or (cmdnm = load) then\line      begin\line        infilename:=parseCmdArg;   (* parse filename argument *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
       }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
i := 1;\line        while (infilename[i] <> ' ') do\line          i := i + 1;\line        for j := i to ARGLENG do infilename[j] := #0;  (*Null padding fixes File Not Found on WSL*)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
       }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
Assign(infile,infilename);\line        RESET(infile);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
       }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
writeln;\line        writeln('Current Directory is : ',GetCurrentDir);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line        writeln(' Loading file : ',infilename);\line        writeln;\line        readfile:=true;  (* tell nextchar function to read from file *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
       }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if cmdnm = load then\line          echo:=true;\line      end;\line end;  (* of processCmd *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    begin (* readInput *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       c := ' ';}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       dollarflag := false;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       if not readfile then write(PROMPT);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       pos := 0;\line       repeat}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          pos := pos+1;\line          if pos = MAXINPUT\line          then begin\line                  writeln('User input too long');\line                  goto 99\line               end;\line          nextchar(c);\line          userinput[pos] := c;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          if (pos=1) and (c=')') then   (* if command, execute it*)\line            begin\line              processCmd;\line              if not readfile then write(PROMPT);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line              pos:=0\line            end\line          else (* otherwise read expr or fundef terminated by dollar *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line              if userinput[pos] = dollar then \line                dollarflag:=true\line              else\line                if readfile then\line                  begin\line                    if eoln(infile) then readDollar\line                  end\line                else (* reading stdin *)\line                  if eoln then readDollar\line       until dollarflag;\line \line       pos:=pos-1;  (* exclude $ from user input *)\line       inputleng := pos;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
      }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if readfile and echo then writeln (* echo LF between inputs *)\line    end; (* readInput *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
begin (* reader *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     repeat}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line        readInput;\line        pos := skipblanks(1);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     until pos <= inputleng (* ignore blank lines *)\line end; (* reader *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line \line (* parseName - return (installed) NAME starting at userinput[pos]*)\line function parseName: NAME;\line var\line    nm: NAMESTRING; (* array to accumulate characters *)\line    leng: NAMESIZE; (* length of name *)\line begin\line    nm[1] := #0;\line    leng := 0;\line    while (pos <= inputleng) and not isDelim(userinput[pos])\line    do begin\line          if leng = NAMELENG\line          then begin\line                  writeln('Name too long, begins: ', nm);\line                  goto 99\line               end;\line          leng := leng+1;\line          nm[leng] := userinput[pos];\line          tokstring[leng]:=userinput[pos];\line          pos := pos+1\line       end;\line    tokleng:=leng;\line    if leng = 0\line    then begin\line            writeln('Error: expected name, instead read: ',\line                    userinput[pos]);\line            goto 99\line         end;\line    for leng := leng+1 to NAMELENG do nm[leng] := ' ';}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    pos := skipblanks(pos); (* skip blanks after name *)\line    parseName := install(nm)\line end; (* parseName *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* isNumber - check if a number begins at pos                    *)\line function isNumber (pos: integer): Boolean;\line \line (* isDigits - check if sequence of digits begins at pos          *)\line    function isDigits (pos: integer): Boolean;\line    begin\line       if not (userinput[pos] in ['0'..'9']) then\line         isDigits := false\line       else\line         begin\line           isDigits := true;\line           while userinput[pos] in ['0'..'9'] do pos := pos + 1;\line           if not isDelim(userinput[pos])\line           then isDigits := false\line         end\line    end; (* isDigits *)\line \line begin (* isNumber *)\line    isNumber := isDigits(pos)\line end; (* isNumber *)\line \line (* parseVal - return number starting at userinput[pos]           *)\line function parseVal: NUMBER;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line var n: integer;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line Begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    n := 0;\line    tokleng:=0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
while userinput[pos] in ['0'..'9'] do\line       begin\line          n := 10*n + (ord(userinput[pos]) - ord('0'));\line          tokleng:=tokleng+1;\line          tokstring[tokleng]:=userinput[pos];\line          pos := pos+1\line       end;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    pos := skipblanks(pos); (* skip blanks after number *)\line    parseVal := n\line end; (* parseVal *)\line \line (*******************************************************************\line                         NEW PARSING ROUTINES\line  *******************************************************************)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* writeTokenName - write the specific token name in printnames array}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
that corresponds to token symbol t.  If t is generic (i.e. nameidsy,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
funidsy,numsy) then write that generic name *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
procedure writeTokenName(t:token);\line var\line  i:NAME;\line  generic:set of token;\line  j:NAMESIZE;\line begin\line  generic := [nameidsy,numsy,funidsy];\line  if t in generic then\line (* output generic name *)\line    begin\line      case t of\line        nameidsy:write('nameid');}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          numsy:write('number');}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line        funidsy:write('funid');}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line        otherwise;\line      end;\line    end\line  else\line (* output specific name *)\line   begin\line     i:=1;\line     while (toktable[i] <> t) and (i <= numBuiltins) do\line       i:= i+1;\line     if i <= numBuiltins then\line     (* write the name of the token *)\line       begin\line         j:=1;\line         while (printNames[i][j] <> ' ') and (j <= NAMELENG) do\line           begin\line             write(printNames[i][j]);\line             j:=j+1\line           end\line       end\line     else   (* name not found, write the symbolic name *)\line       write(t)\line   end\line end;  (* of writeTokenName *)\line \line (* writeTokenString - Write out chars of token string. During errors, this function is used to display invalid string found in the userinput *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
procedure writeTokenString;\line var\line  i:integer;\line begin\line  for i:= 1 to tokleng do\line    write(tokstring[i]);\line  write(' ');\line end;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* displays error messages based on the given error number *)\line procedure errmsg(errnum:integer);\line begin\line   writeln;\line   CASE errnum of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     1:begin\line        write('Error parsing arglist.  Found ');\line        writeTokenString;\line        writeln('where ")" or nameid is expected.');\line       end;\line     2:begin\line        write('Error parsing function name.  Found ');\line        writeTokenString;\line        writeln('funid or nameid is expected.');\line       end;\line     3:begin\line        write('Error parsing exp6.  Found ');\line        writeTokenString;\line        writeln('where nameid, funid, "(", or a number  is expected.');\line       end;\line     4:begin\line        write('Error parsing expr.  Found ');\line        writeTokenString;\line        writeln('where one of the following is expected: ');\line        writeln('"if", "while", "seq", "print", nameid, funid, number, or "(" ');\line       end;\line     otherwise;\line   end;\line   writeln;\line   goto 99\line end;  (* of errmsg *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* Identify token that begins at userinput[pos], return its symbol in global variable toksy and leave pos pointing to first nonblank that follows. *)\line procedure getToken;\line var\line    nm: NAMESTRING; (* array to accumulate characters *)\line    leng: NAMESIZE; (* length of name *)\line \line begin\line   if isNumber(pos) then   (* parse a number *)\line     begin\line       numval := parseVal;\line       toksy := numsy\line     end}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line   else if (userinput[pos] = ':') and (userinput[pos+1] = '=') then\line    (* parse an assignment *)\line     begin\line       leng := 2;\line       nm[1] := ':';\line       nm[2] := '=';\line \line       tokleng := leng;\line       tokstring[1] := ':';\line       tokstring[2] := '=';\line \line       pos := pos + 2;\line       for leng := leng+1 to NAMELENG do nm[leng] := ' ';\line       pos := skipblanks(pos);\line       tokindex := install(nm);\line       toksy := toktable[tokindex]\line     end\line   else if userinput[pos] in punctop then  }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* parse single char punct or operator *)\line     begin\line       leng := 1;\line       nm[1] := userinput[pos];\line \line       tokleng := leng;\line       tokstring[1] := userinput[pos];\line \line       pos := pos + 1;\line       for leng := leng+1 to NAMELENG do nm[leng] := ' ';\line       pos := skipblanks(pos);\line       tokindex := install(nm);\line       toksy := toktable[tokindex]\line     end\line \line   else    (* else parse a name *)\line     tokindex := parseName\line end; (* getToken *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* change nameidsy to funidsy or vice versa *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line procedure mutate(newtype:token);\line begin\line   if (toksy <> nameidsy) and (toksy <> funidsy) then\line     begin\line       write('mutate: found ');\line       writeTokenString;\line       writeln(' where nameid or funid is expected.');\line       goto 99\line     end\line   else\line     toktable[tokindex] := newtype\line end;   (* of mutate *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* match the expected token t and get next one.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
Explanation: If the expected token t matches the current one in toksy }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
then call getToken to return the next token from userinput in toksy *)\line procedure match(t:token);\line begin\line    if toksy = t then\line      getToken\line    else\line      begin\line        write('Error in match. Found ');\line        writeTokenString;\line        write(' where ');\line        writeTokenName(t);\line        writeln(' is expected.');\line        goto 99\line      end;\line end;  (* of match *)\line \line (* parse parameters of a fundef *)\line function parseParams:NAMELIST;\line var\line    nm:NAME;\line    nl:NAMELIST;\line begin\line    CASE toksy of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line      rparsy:  parseParams := nil;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
     }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
nameidsy: begin\line                 nm:=tokindex;\line                 match(nameidsy);\line                 if toksy = comsy then\line                   begin\line                     match(comsy);\line                     nl:=parseParams\line                   end\line                 else\line                   nl:=nil;\line                 parseParams := MkNamelist(nm,nl)\line               end;\line      otherwise;\line          errmsg(1)\line    end\line end;  (* of parseParams *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
function parseExpr:EXP;forward;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (* parseDef - parse function definition at userinput[pos]        *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line function parseDef:NAME;\line var\line    fname: NAME;        (* function name *)\line    nl: NAMELIST;       (* formal parameters *)\line    e: EXP;             (* body *)\line begin\line    match(funsy);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    mutate(funidsy);\line    fname := tokindex;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
CASE toksy of\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
     }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
nameidsy:match(nameidsy);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line      funidsy:match(funidsy);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
     }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
otherwise;\line        errmsg(2)\line    end;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    match(lparsy);\line    nl := parseParams;\line    match(rparsy);\line    match(assignsy);\line    e := parseExpr;\line    match(nufsy);\line    newDef(fname, nl, e);\line    parseDef := fname\line end; (* parseDef *)\line \line (* parse arguments of a function call *)\line function parseArgs:EXPLIST;\line var\line   ex:EXP;\line   eL:EXPLIST;\line begin\line   if toksy = rparsy then\line     parseArgs := nil\line   else\line     begin\line       ex:=parseExpr;\line       if toksy = comsy then\line         begin\line           match(comsy);\line           eL := parseArgs\line         end\line       else\line         eL := nil;\line       parseArgs := mkEXPLIST(ex,eL)\line     end\line end; (* of parseArgs *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* parse a function call *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line function parseCall:EXP;\line var\line   eL:EXPLIST;\line   nm:NAME;\line begin\line   nm:=tokindex;\line   match(funidsy);\line   match(lparsy);\line   eL := parseArgs;\line   match(rparsy);\line   parseCall := mkAPEXP(nm,eL)\line end; (* parseCall *)\line \line (* parse an expression list separated by semicolons *)\line function parseEL:EXPLIST;\line var\line   ex:EXP;\line   eL:EXPLIST;\line begin\line   ex:=parseExpr;\line   if toksy = semsy then\line     begin\line       match(semsy);\line       eL := parseEL\line     end\line   else\line     eL := nil;\line   parseEL := mkExplist(ex,eL)\line end;  (* parseEL *)\line \line (* parse an if expression *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line function parseIf:EXP;\line var\line   e1,e2,e3:EXP;\line   eL:EXPLIST;\line   nm:NAME;\line begin\line   nm := tokindex;\line   match(ifsy);\line   e1 := parseExpr;\line   match(thensy);\line   e2 := parseExpr;\line   match(elsesy);\line   e3 := parseExpr;\line   match(fisy);\line   eL := mkExplist(e3,nil);\line   eL := mkExplist(e2,eL);\line   eL := mkExplist(e1,eL);\line   parseIf := mkAPEXP(nm,eL)\line end; (* parseIf *)\line \line (* parse a while expression *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line function parseWhile:EXP;\line var\line   e1,e2:EXP;\line   eL:EXPLIST;\line   nm:NAME;\line begin\line   nm := tokindex;\line   match(whilesy);\line   e1 := parseExpr;\line   match(dosy);\line   e2 := parseExpr;\line   match(odsy);\line   eL := mkExplist(e2,nil);\line   eL := mkExplist(e1,eL);\line   parseWhile := mkAPEXP(nm,eL)\line end; (* parseWhile *)\line \line (* parse a sequence expression *)\line function parseSeq:EXP;\line var\line   eL:EXPLIST;\line   nm:NAME;\line begin\line   nm := tokindex;\line   match(seqsy);\line   eL := parseEL;\line   match(qessy);\line   parseSeq := mkAPEXP(nm,eL)\line end; (* parseSeq *)\line \line (* \line    The following functions (parseExp1 through parseExp6) implement the\line    following grammar rules.\line \line    exp1 \uc2 \u8722\'81\'7c\u8594\'81\'a8 exp2 [ :=  exp1 ]*\line    exp2 \u8722\'81\'7c\u8594\'81\'a8 [ prtop ] exp3\line    exp3 \u8722\'81\'7c\u8594\'81\'a8 exp4 [ relop exp4 ]*\line    exp4 \u8722\'81\'7c\u8594\'81\'a8 exp5 [ addop exp5 ]*\line    exp5 \u8722\'81\'7c\u8594\'81\'a8 [ addop ] exp6 [ mulop exp6 ]*\line    exp6 \u8722\'81\'7c\u8594\'81\'a8 name | integer | funcall | ( expr )\line \line    The recursive structure of these rules yields the following list from\line    lowest to highest precedence:\line    \line      :=\line      prtop\line      relop\line      addop\line      unary addop, mulop\line      variable name, integer, function call, expression in parentheses\line \line    Since the functions call each other recursively, they are implemented\uc1 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
in reverse order below to avoid forward declarations.\line *)\line \line (* parse var name, integer, function call, parenthesized expression *)\line function parseExp6:EXP;\line var\line      ex:EXP;\line   varnm:NAME;\line     num:NUMBER;\line begin\line   case toksy of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     nameidsy:begin\line               varnm:=tokindex;\line               match(nameidsy);\line               ex:=mkVAREXP(varnm)\line             end;\line       numsy:begin\line               num:=numval;\line               match(numsy);\line               ex:=mkVALEXP(num)\line             end;\line      lparsy:begin\line               match(lparsy);\line               ex:=parseExpr;\line               match(rparsy)\line             end;\line     funidsy: ex:=parseCall;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    otherwise;\line        errmsg(3)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi180\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line   end; (* case *)\line   parseExp6 := ex     (* return ptr to an expression *)\line end;  (* parseExp6 *)\line \line (* parse unary addop, binary mulop *)\line function parseExp5:EXP;\line var\line   nm:NAME;\line   ex,e1,e2:EXP;\line   eL:EXPLIST;\line   addop_token:token;\line   sign:NUMBER;\line begin\line   addop_token:=dollarsy; (* Initialize so prior value is not reused.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2880\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
E.g. for -10-7$, after negating 10,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
7 was incorrectly negated. *)\line \line   if toksy in addops then (* unary + or - *)\line     begin\line       addop_token:=toksy;\line       match(toksy)\line     end;\line \line   e1:=parseExp6;\line \line   if addop_token = subsy then \line   (* for unary minus, make an expr to multiply e1 by -1 *)\line     begin\line       sign:=-1;\line       ex:=mkVALEXP(sign);\line       eL:=mkExplist(ex,nil);\line       eL:=mkExplist(e1,eL);\line       nm:=mulsy_index;\line       e1:=mkAPEXP(nm,eL)\line     end;\line \line   while toksy in mulops do\line     begin\line       nm:=tokindex;\line       match(toktable[nm]);\line       e2:=parseExp6;\line       eL:=mkExplist(e2,nil);\line       eL:=mkExplist(e1,eL);\line       e1:=mkAPEXP(nm,eL)\line     end;\line   parseExp5:=e1;\line end;  (* parseExp5 *)\line \line (* parse binary addop *)\line function parseExp4:EXP;\line var\line   nm:NAME;\line   e1,e2:EXP;\line   eL:EXPLIST;\line begin\line   e1:=parseExp5;\line   while toksy in addops do\line     begin\line       nm:=tokindex;\line       match(toktable[nm]);\line       e2:=parseExp5;\line       eL:=mkExplist(e2,nil);\line       eL:=mkExplist(e1,eL);\line       e1:=mkAPEXP(nm,eL)\line     end;\line   parseExp4:=e1;\line end;  (* parseExp4 *)\line \line (* parse binary relop *)\line function parseExp3:EXP;\line var\line   nm:NAME;\line   e1,e2:EXP;\line   eL:EXPLIST;\line begin\line   e1:=parseExp4;\line   while toksy in relops do \line     begin\line       nm:=tokindex;\line       match(toktable[nm]);\line       e2:=parseExp4;\line       eL:=mkExplist(e2,nil);\line       eL:=mkExplist(e1,eL);\line       e1:=mkAPEXP(nm,eL)\line     end;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
  }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
parseExp3:=e1;                                             \line end;  (* parseExp3 *)\line \line (* parse print op *)\line function parseExp2:EXP;\line var\line   eL:EXPLIST;\line   ex:EXP;\line   nm:NAME;\line   printflag:boolean;\line begin\line   printflag:=false;\line   if toksy = printsy then\line     begin\line       printflag:=true;\line       nm:=tokindex;\line       match(printsy)\line     end;\line   ex:=parseExp3;\line   if printflag then\line     begin\line       eL:=mkExplist(ex,nil);\line       parseExp2:=mkAPEXP(nm,eL)\line     end\line   else\line     parseExp2:=ex;\line end;  (* parseExp2 *)\line \line (* parse assignment *)\line function parseExp1:EXP;\line var\line   eL:EXPLIST;\line   ex,e2:EXP;\line   nm:NAME;\line begin\line   ex:=parseExp2;\line   while toksy = assignsy do\line   (* build an assignment expression *)\line     begin\line       nm:=tokindex;\line       match(assignsy);\line       if ex^.etype = VAREXP then (* l.h.s. must be a variable *)\line         begin\line           e2:=parseExp1;     (* process r.h.s.*)\line           eL:=mkExplist(e2,nil);\line           eL:=mkExplist(ex,eL);\line           ex:=mkAPEXP(nm,eL)\line         end\line       else (* illegal l.h.s. *)\line         begin\line           writeln('parseExp1: left hand side must be a variable');\line           goto 99\line         end;\line     end;  (* of while *)\line     parseExp1:=ex\line end;  (* parseExp1 *)\line \line (* parse if, while, seq, exp1 *)\line function parseExpr;\line  var\line   ex:EXP;\line begin\line   case toksy of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line        ifsy: ex:=parseIf;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     whilesy: ex:=parseWhile;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       seqsy:  ex:=parseSeq;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       nameidsy,numsy,subsy,funidsy,printsy,lparsy: ex:=parseExp1;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     otherwise;\line        errmsg(4)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi2970\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line   end; (* case *)\line   parseExpr:=ex;\line end; (* parseExpr *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(*****************************************************************\line  *                     ENVIRONMENTS                              *\line  *****************************************************************)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
(* emptyEnv - return an environment with no bindings             *)\line function emptyEnv: ENV;\line begin\line    emptyEnv := mkEnv(nil, nil)\line end; (* emptyEnv *)\line \line (* bindVar - bind variable nm to value n in environment rho      *)\line procedure bindVar (nm: NAME; n: NUMBER; rho: ENV);\line begin\line    rho^.vars := mkNamelist(nm, rho^.vars);\line    rho^.values := mkValuelist(n, rho^.values)\line end; (* bindVar *)\line \line (* findVar - look up nm in rho                                   *)\line function findVar (nm: NAME; rho: ENV): VALUELIST;\line var\line    nl: NAMELIST;\line    vl: VALUELIST;\line    found: Boolean;\line begin\line    found := false;\line    nl := rho^.vars;\line    vl := rho^.values;\line    while (nl <> nil) and not found do}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       if nl^.head = nm\line       then found := true\line       else begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line               nl := nl^.tail;\line               vl := vl^.tail\line            end;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    findVar := vl\line end; (* findVar *)\line \line (* assign - assign value n to variable nm in rho                 *)\line procedure assign (nm: NAME; n: NUMBER; rho: ENV);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line var varloc: VALUELIST;\line begin\line    varloc := findVar(nm, rho);\line    varloc^.head := n\line end; (* assign *)\line \line (* fetch - return number bound to nm in rho                      *)\line function fetch (nm: NAME; rho: ENV): NUMBER;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line var vl: VALUELIST;\line begin\line    vl := findVar(nm, rho);\line    fetch := vl^.head\line end; (* fetch *)\line \line (* isBound - check if nm is bound in rho                         *)\line function isBound (nm: NAME; rho: ENV): Boolean;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
begin\line    isBound := findVar(nm, rho) <> nil\line end; (* isBound *)\line \line (*****************************************************************\line  *                     NUMBERS                                              *\line  *****************************************************************)\line \line (* prValue - print number n                                      *)\line procedure prValue (n: NUMBER);\line begin\line    write(n:1)\line end; (* prValue *)\line \line (* isTrueVal - return true if n is a true (non-zero) value       *)\line function isTrueVal (n: NUMBER): Boolean;\line begin\line    isTrueVal := n <> 0\line end; (* isTrueVal *)\line \line (* applyValueOp - apply VALUEOP op to arguments in VALUELIST vl  *)\line function applyValueOp (op: VALUEOP; vl: VALUELIST): NUMBER;\line \line var n, n1, n2: NUMBER;\line \line (* arity - return number of arguments expected by op             *)\line    function arity (op: VALUEOP): integer;\line    begin\line       if op in [ADDOP .. GTOP] }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi540\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
then arity := 2}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi540\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi540\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
else arity := 1\line    end; (* arity *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi540\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line begin (* applyValueOp *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi540\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    if arity(op) <> lengthVL(vl)\line    then begin\line            write('Wrong number of arguments to ');\line            prName(ord(op)+1);\line            writeln;\line            goto 99\line         end;\line    n1 := vl^.head; (* 1st actual *)\line    if arity(op) = 2 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
then n2 := vl^.tail^.head; (* 2nd actual *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    case op of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       ADDOP: n := n1+n2;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       SUBOP: n := n1-n2;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       MULOP: n := n1*n2;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       DIVOP: n := n1 div n2;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       EQOP: if n1 = n2 then n := 1 else n := 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       LTOP: if n1 < n2 then n := 1 else n := 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       GTOP: if n1 > n2 then n := 1 else n := 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       PRINTOP:\line          begin prValue(n1); writeln; n := n1 end}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    end; (* case *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
   }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
applyValueOp := n\line end; (* applyValueOp *) \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line (*****************************************************************\line  *                     EVALUATION                                *\line  *****************************************************************)\line \line (* eval - return value of expression e in local environment rho  *)\line function eval (e: EXP; rho: ENV): NUMBER;\line \line var op: BUILTINOP;\line \line (* evalList - evaluate each expression in el                     *)\line    function evalList (el: EXPLIST): VALUELIST;\line    var\line       h: NUMBER;\line       t: VALUELIST;\line    begin\line       if el = nil then evalList := nil}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       else begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line               h := eval(el^.head, rho);\line               t := evalList(el^.tail);\line               evalList := mkValuelist(h, t)\line            end\line    end; (* evalList *)\line \line (* applyUserFun - look up definition of nm and apply to actuals  *)\line    function applyUserFun (nm: NAME; actuals: VALUELIST): NUMBER;\line    var\line       f: FUNDEF;\line       rho: ENV;\line    begin\line       f := fetchDef(nm);\line       if f = nil\line       then begin\line               write('Undefined function: ');\line               prName(nm);\line               writeln;\line               goto 99\line            end;\line       with f^ do begin\line          if lengthNL(formals) <> lengthVL(actuals)\line          then begin\line                  write('Wrong number of arguments to: ');\line                  prName(nm);\line                  writeln;\line                  goto 99\line               end;\line          rho := mkEnv(formals, actuals);\line          applyUserFun := eval(body, rho)\line          end\line    end; (* applyUserFun *)\line \line (* applyCtrlOp - apply CONTROLOP op to args in rho               *)\line    function applyCtrlOp (op: CONTROLOP;\line                        args: EXPLIST): NUMBER;\line    var n: NUMBER;\line    begin\line       with args^ do\line          case op of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line            IFOP:\line               if isTrueVal(eval(head, rho))\line               then applyCtrlOp := eval(tail^.head, rho)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line               else applyCtrlOp := eval(tail^.tail^.head, rho);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line            WHILEOP:\line               begin\line                  n := eval(head, rho);\line                  while isTrueVal(n)\line                  do begin\line                        n := eval(tail^.head, rho);\line                        n := eval(head, rho)\line                     end;\line                  applyCtrlOp := n\line               end;\line            ASSIGNOP:\line               begin\line                  n := eval(tail^.head, rho);\line                  if isBound(head^.varble, rho)\line                  then assign(head^.varble, n, rho)\line                  else if isBound(head^.varble, globalEnv)\line                       then assign(head^.varble, n, globalEnv)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                       else bindVar(head^.varble, n, globalEnv);\line                  applyCtrlOp := n\line               end;\line            SEQOP:\line               begin\line                  while args^.tail <> nil do\line                     begin\line                        n := eval(args^.head, rho);\line                        args := args^.tail\line                     end;\line                  applyCtrlOp := eval(args^.head, rho)\line               end}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          end (* case and with *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    end; (* applyCtrlOp *)\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line begin (* eval *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    with e^ do\line       case etype of}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          VALEXP:\line            eval := num;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line          VAREXP:\line            if isBound(varble, rho)\line            then eval := fetch(varble, rho)\line            else if isBound(varble, globalEnv)\line                 then eval := fetch(varble, globalEnv)\line                 else begin\line                        write('Undefined variable: ');\line                        prName(varble);\line                        writeln;\line                        goto 99\line                      end;\line          APEXP:}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line            if optr > numBuiltins\line            then eval := applyUserFun(optr, evalList(args))\line            else begin}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
                  }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
op := primOp(optr);\line                   if op in [IFOP .. SEQOP]\line                   then eval := applyCtrlOp(op, args)\line                   else }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
eval:=applyValueOp(op, evalList(args))\line                 end}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line       end; (* case and with *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line end; (* eval *)\line \line (*****************************************************************\line  *                     READ-EVAL-PRINT LOOP                      *\line  *****************************************************************)\line \line begin (* chapter1 main *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    initParse;\line    initNames;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    globalEnv := emptyEnv;\line    quittingtime := false;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line 99:\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi1890\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
  }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line    while not quittingtime do\line      begin\line       reader;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
      }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
getToken;  (* return the first token from userinput in toksy *)\line \line       if toksy = quitsy then\line         quittingtime := true\line       else if toksy = funsy then\line              begin\line                prName(parseDef);\line                writeln\line              end\line            else\line              begin\line                currentExp := parseExpr;\line                prValue(eval(currentExp, emptyEnv));\line                writeln\line             end\line      end (* while *)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line end. (* chapter1 *)\line }\cell\pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
/*****************************************************************\line  *                     DECLARATIONS                              *\line  *****************************************************************/\line #define _POSIX_C_SOURCE 200809L\line #include <stdio.h>\line #include <stddef.h>\line #include <string.h>\line #include <setjmp.h>\line #include <stdlib.h>\line #include <ctype.h>\line #include <errno.h>\line #include <limits.h>\line #include <unistd.h>\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: setjmp(JL99) replaces label 99: in main. errmsg() does a longjmp back to that point after an error message is displayed.}{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line jmp_buf JL99;  \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
#define NAMELENG 20     // Max length of a name\line \line #ifdef TESTSIZE\line #define MAXNAMES  29    // Max no. of names to test err_max_names\line #define MAXINPUT  50    // Max input length to test err_input_len\line #else\line #define MAXNAMES 100    // Max number of different names\line #define MAXINPUT 500    // Max length of an input\line #endif\line \line #define MAXCMDLENG 8    // Max length of a command name\line #define MAXCMDS 3       // Max number of different commands\line #define ARGLENG 40      // Maximum length of a command argument\line #define MAXDIGITS 19    // Max digits in LONG_MAX in limits.h\line                             // for __WORDSIZE == 64\line \line #define PROMPT      "-> "  // Initial prompt\line #define PROMPT2     "> "   // continuation prompt}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
#define TAB 9           \line #define LF 10\line #define CR 13\line \line #define COMMENTCHAR '!'\line #define DOLLAR      '$'  // marks END of expr or fundef input by user\line #define SPACE       ' '}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
#define RPAREN      ')'  // marks beginning of a Cmd\line \line typedef short int NAMESIZE;\line typedef char *NAMESTRING;\line typedef short int NAME;\line \line typedef short int CMDSIZE;\line typedef char *CMDSTRING;\line typedef short int CMD;\line \line typedef long NUMBER;\line typedef short int ARGSIZE;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
typedef enum \{false, true\} BOOLEAN;\line \line typedef enum \{IFOP,WHILEOP,ASSIGNOP,SEQOP,ADDOP,SUBOP,MULOP,DIVOP, EQOP,LTOP,GTOP,PRINTOP\} BUILTINOP;\line }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: VALUEOP range replaced with firstValueOp, lastValueOp indexes. CONTROLOP range replaced with firstControlOp, lastControlOp indexes.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
                }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line typedef enum \{nameidsy=1,numsy,funidsy,ifsy,thensy,elsesy,fisy,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
whilesy,dosy, odsy,seqsy,qessy,funsy,nufsy,assignsy,rparsy,\line lparsy,semsy,comsy,addsy,subsy,mulsy,divsy,eqsy,lssy,\line gtsy,printsy,quitsy,dollarsy\} TOKEN; \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Error messages in the Pacal version were displayed at the point of occurrence and followed by a goto label 99 in the main function. Those are now replaced with a call to errmsg() which is passed one of the error codes below. errmsg() prints the associated message then calls longjmp(JL99, errnum) to return to main to read the next input. }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
       }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line typedef enum \{err_arglist=1, err_function, err_exp6, err_expr, err_cwd,}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
err_open, err_max_names, err_input_len, err_cmd_len, err_no_cmd,\line  err_bad_cmd, err_arg_len, err_no_name, err_name_len,\line  err_no_name2, err_digits, err_no_name3, err_mismatch,\line  err_not_var, err_num_args, err_undef_func, err_num_args2,\line  err_undef_var, err_undef_op, err_nested_load\line \} ERROR_NUM; // error codes passed to errmsg()\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line typedef struct EXPREC* EXP;\line typedef struct EXPLISTREC* EXPLIST;\line typedef struct ENVREC* ENV;\line typedef struct VALUELISTREC* VALUELIST;\line typedef struct NAMELISTREC* NAMELIST;\line typedef struct FUNDEFREC* FUNDEF;\line \line enum EXPTYPE \{VALEXP,VAREXP,APEXP\};\line struct EXPREC \{\line     enum EXPTYPE etype;\line     union \{\line         NUMBER num;\line         NAME varble;\line         struct \{\line             NAME optr;\line             EXPLIST args;\line         \} ap;\line     \} u;\line \};\line \line struct EXPLISTREC \{\line     EXP head;\line     EXPLIST tail;    \line \};\line \line struct VALUELISTREC \{\line     NUMBER head;\line     VALUELIST tail;    \line \};\line \line struct NAMELISTREC \{\line     NAME head;\line     NAMELIST tail;\line \};\line \line struct ENVREC \{\line     NAMELIST vars;\line     VALUELIST values;\line \};\line \line struct FUNDEFREC \{\line     NAME     funname;\line     NAMELIST formals;\line     EXP      body;\line     FUNDEF   nextfundef;\line \};\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
FUNDEF fundefs;\line NUMBER numval;\line ENV globalEnv;\line EXP currentExp;\line \line char punctop[] = "()+-*/:=<>;,$!";  // punctuation and operator chars\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
char userinput[MAXINPUT];}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
short int j, inputleng, pos;\line \line NAMESTRING printNames[MAXNAMES];  //built-in & user-defined names\line CMDSTRING  printCmds[MAXCMDS];     //built-in command names\line \line char tokstring[NAMELENG+1];  // token string for display in error messages\line NAMESIZE tokleng;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
char infilename[ARGLENG];\line FILE *infp;     // input source file pointer}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line CMD load,        // load file, echo characters\line     sload,       // silently load file, no echo\line     user;        // print user defined names\line \line NAME numNames, numCmds, numBuiltins, tokindex, mulsy_index, \line      // initNames() saves index of first/last ControlOp & ValueOp \line      // in following variables for checking which range Op is in.\line      firstValueOp, lastValueOp, firstControlOp, lastControlOp;\line \line \line TOKEN toksy;     // symbolic name of token\line TOKEN toktable[MAXNAMES]; // symbolic name of each token in printNames.\line                           // Corresponding toktable & printNames elements\line                           // have same index\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: The Pascal sets on the left were replaced with direct comparison to the set values as indicated in Section 3 part 4 above.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line BOOLEAN quittingtime, // true = exit program\line           dollarflag,   // true = $ was entered which marks end of input}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line           echo,         // true = echo chars during a load command}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
          }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
readfile,    // true = an input file is being loaded}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
          }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
eof,          // eof and eoln are used to mimic the boolean\line           eoln;         // Pascal functions eof() and eoln()\line \line void errmsg(ERROR_NUM, char[], int); // forward declaration\line \line //---------------------------\line // DATA STRUCTURE OPERATIONS\line //---------------------------\line \line // mkVALEXP - return an EXP of type VALEXP with num n\line EXP mkVALEXP (NUMBER n)\line \{\line     EXP e;\line \line     e = malloc(sizeof(struct EXPREC));\line     e->etype = VALEXP;\line     e->u.num = n;\line     return e;\line \} // mkVALEXP\line \line // mkVAREXP - return an EXP of type VAREXP with varble nm\line EXP mkVAREXP (NAME nm)\line \{\line     EXP e;\line \line     e = malloc(sizeof(struct EXPREC));\line     e->etype = VAREXP;\line     e->u.varble = nm;\line     return e;\line \} // mkVAREXP\line \line // mkAPEXP - return EXP of type APEXP with optr op and args eL\line EXP mkAPEXP (NAME op, EXPLIST eL)\line \{\line     EXP e;\line \line     e = malloc(sizeof(struct EXPREC));\line     e->etype = APEXP;\line     e->u.ap.optr = op;\line     e->u.ap.args = eL;\line     return e;\line \} // mkAPEXP\line \line // mkExplist - return an EXPLIST with head e and tail eL\line EXPLIST mkExplist (EXP e, EXPLIST eL)\line \{\line     EXPLIST newel;\line \line     newel = malloc(sizeof(struct EXPLISTREC));\line     newel->head = e;\line     newel->tail = eL;\line     return newel;\line \} // mkExplist\line \line // mkNamelist - return a NAMELIST with head n and tail nl\line NAMELIST mkNamelist (NAME nm, NAMELIST nl) \line \{\line     NAMELIST newnl;\line \line     newnl = malloc(sizeof(struct NAMELISTREC));\line     newnl->head = nm;\line     newnl->tail = nl;\line     return newnl;\line \} // mkNamelist\line \line // mkValuelist - return an VALUELIST with head n and tail vl\line VALUELIST mkValuelist (NUMBER n, VALUELIST vl)\line \{\line     VALUELIST newvl;\line     \line     newvl = malloc(sizeof(struct VALUELISTREC));\line     newvl->head = n;\line     newvl->tail = vl;\line     return newvl;\line \}\line \line // mkEnv - return an ENV with vars nl and values vl\line ENV mkEnv (NAMELIST nl, VALUELIST vl)\line \{\line     ENV rho;\line \line     rho = malloc(sizeof(struct ENVREC));\line     rho->vars = nl;\line     rho->values = vl;\line     return rho;\line \} // mkEnv\line \line // prEnv - print vars & values in an ENV - for debugging\line void prEnv(ENV env)\line \{\line     \line     NAMELIST nl;\line     VALUELIST vl;\line     \line     int i;\line     \line     i=0;\line     nl = env->vars;\line     vl = env->values;\line     \line     while (nl != 0)\line     \{   \line         i = i + 1;\line         printf("%d.  %s = %ld", i, printNames[nl->head], vl->head);\line         nl = nl->tail;\line         vl = vl->tail;\line     \}\line \} // prEnv\line \line // lengthVL - return length of VALUELIST vl\line int lengthVL (VALUELIST vl)\line \{\line     int i;\line \line     i = 0;\line     while (vl != 0)\line     \{\line         i = i+1;\line         vl = vl->tail;\line     \}\line     return i;\line \} // lengthVL\line \line // lengthNL - return length of NAMELIST nl\line int lengthNL (NAMELIST nl)\line \{\line     int i;\line \line     i = 0;\line     while (nl != 0)\line     \{\line         i = i+1;\line         nl = nl->tail;\line     \}\line     return i;\line \} // lengthNL\line }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
\line }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
void prExplist(EXPLIST); //forward declaration\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Below are more print functions for debugging}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // print an EXP\line void prExp(EXP e)\line \{\line     switch (e->etype)\line     \{\line         case VALEXP:\line             printf("etype = VALEXP\\n");\line             printf("  num = %ld\\n", e->u.num);\line             break;\line             \line         case VAREXP:\line             printf(" etype = VAREXP\\n");\line             printf("varble = %s\\n", printNames[e->u.varble]);           \line             break;\line         \line         case APEXP:\line             printf(" etype = APEXP\\n");\line             printf("  optr = %s\\n", printNames[e->u.ap.optr]);\line             prExplist(e->u.ap.args); \line             break;\line         \line         default:\line             printf("Invalid etype = %d", e->etype);\line             break;\line     \}\line \}\line \line // prExplist - print an Explist\line void prExplist(EXPLIST eL)\line \{\line     prExp(eL->head);\line     \line     if (eL->tail != 0)\line         prExplist(eL->tail);\line     return;\line \} // prExplist\line \line //-----------------\line // NAME MANAGEMENT\line //-----------------\line \line // fetchDef - get FUNCTION definition of fname from fundefs\line FUNDEF fetchDef (NAME fname)\line \{\line      FUNDEF f;\line      BOOLEAN found;\line \line      found = false;\line      f = fundefs;\line      while (f != 0 && !found)\line          if (f->funname == fname)\line              found = true;\line          else\line              f = f->nextfundef;\line      return f;\line \} // fetchDef\line \line // newDef - add new FUNCTION fname with parameters nl, body e\line void newDef (NAME fname, NAMELIST nl, EXP e)\line \{\line     FUNDEF f;\line \line     f = fetchDef(fname);\line     if (f == 0)  // fname not yet defined as a FUNCTION\line     \{\line         f = malloc(sizeof(struct FUNDEFREC));\line         f->nextfundef = fundefs;   // place new FUNDEFREC\line         fundefs = f;               // at front of fundefs list\line     \}\line     f->funname = fname;\line     f->formals = nl;\line     f->body = e;\line \} // newDef\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Null-terminated strings are used in initNames below instead of the space-padded strings used in the Pascal version. So all the loops that deal with space-padding are removed in the C version.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // initNames - place all pre-defined (built in) names into printNames\line // and corresponding token symbols in toktable. user-defined names }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// (functions, variables) are also kept here\line void initNames()\line \{\line     int i;\line \line     fundefs = 0;   //empty list of fundefs\line     firstControlOp = i = 0;\line     printNames[i] = "if";     toktable[i] = ifsy;     i = i+1;\line     printNames[i] = "while"; toktable[i] = whilesy;  i = i+1;\line     printNames[i] = ":=";     toktable[i] = assignsy; i = i+1;\line     \line     lastControlOp = i;\line     printNames[i] = "seq";   toktable[i] = seqsy;    i = i+1;\line \line     firstValueOp = i;\line     printNames[i] = "+";     toktable[i] = addsy;   i = i+1;\line     printNames[i] = "-";     toktable[i] = subsy;   i = i+1;\line \line // To handle negative numbers (unary minus), we build an APEXP with the}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// multiply operator and operand -1. Below we save the multiply symbol}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// index so we can insert it into the APEXP later.\line \line     mulsy_index = i;\line     printNames[i] = "*";     toktable[i] = mulsy;   i = i+1;\line     printNames[i] = "/";     toktable[i] = divsy;   i = i+1;\line     printNames[i] = "=";     toktable[i] = eqsy;    i = i+1;\line     printNames[i] = "<";     toktable[i] = lssy;    i = i+1;\line     printNames[i] = ">";     toktable[i] = gtsy;    i = i+1;\line                              \line     lastValueOp = i;\line     printNames[i] = "print"; toktable[i] = printsy;  i = i+1;\line     printNames[i] = "quit";  toktable[i] = quitsy;   i = i+1;\line     printNames[i] = "then";  toktable[i] = thensy;   i = i+1;\line     printNames[i] = "else";  toktable[i] = elsesy;   i = i+1;\line     printNames[i] = "fi";    toktable[i] = fisy;     i = i+1;\line     printNames[i] = "do";    toktable[i] = dosy;     i = i+1;\line     printNames[i] = "od";    toktable[i] = odsy;     i = i+1;\line     printNames[i] = "qes";   toktable[i] = qessy;    i = i+1;\line     printNames[i] = "fun";   toktable[i] = funsy;    i = i+1;\line     printNames[i] = "nuf";   toktable[i] = nufsy;    i = i+1;\line     printNames[i] = "(";     toktable[i] = lparsy;   i = i+1;\line     printNames[i] = ")";     toktable[i] = rparsy;   i = i+1;\line     printNames[i] = ";";     toktable[i] = semsy;    i = i+1;\line     printNames[i] = ",";     toktable[i] = comsy;    i = i+1;\line     printNames[i] = "$";     toktable[i] = dollarsy; i = i+1;\line \line     numNames = numBuiltins = i;  // no. of entries in 0 to numBuiltins-1\line \} // initNames\line \line // initCmds - place all pre-defined commands into printCmds\line void initCmds()\line \{\line     short int i;\line     \line     i = 0;\line     printCmds[i] = "sload"; sload = i; i = i+1;\line     printCmds[i] =  "load";  load = i; i = i+1;\line     printCmds[i] =  "user";  user = i; i = i+1;\line     numCmds = i;\line \} //initCmds\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// prName - print name nm\line void prName(NAME nm)\line \{\line     printf("%s",printNames[nm]);\line \} // prName}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Following function implements command \uc2 \u8220\'81\'67user\u8221\'81\'68 which is for debugging\uc1 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // prUserList - List user-defined names and token type id\line void prUserList()\line \{\line     int i;\line     \line     for(i = numBuiltins; i < numNames; i++) \line     \{\line         printf("printNames[%d]= ", i);\line         prName(i);\line         printf("   toktable[%d]= %d\\n", i, toktable[i]);\line     \}\line \} // prUserList\line \line // install - insert new name into printNames, set its type in toktable\line //           - save its type in toksy, return its index in printNames array\line NAME install(char *nm)\line \{\line     NAME i;\line     int result;\line     BOOLEAN found;\line     \line     i = 0; \line     found = false;\line     result = 0;\line     \line     while (i < numNames && !found)\line     \{\line         result = strcmp(nm, printNames[i]);\line         \line         if (!result)\line             found = true;\line         else\line             i = i+1;\line     \}   \line     \line     if (!found)\line     \{\line         if (i == MAXNAMES)\line             errmsg(err_max_names, null_str, null_int);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         printNames[i] = malloc(sizeof(char *));  //alloc memory for a ptr to char \line         numNames = i + 1;\line         strcpy(printNames[i], nm);  //insert name in printNames\line         toktable[i] = nameidsy;     //set its type in toktable\line     \}\line     toksy = toktable[i];   //save current token symbol type \line     return i;   //return index of name\line \} // install\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // initParse - initialization of variables\line void initParse()\line \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     readfile = echo = eoln = eof = dollarflag = false;\line     userinput[0] = tokstring[0] = 0; //null terminate\line     inputleng = tokleng = pos = 0; \line \}\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line //------------\line // INPUT\line //------------\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // isDelim - check if c is a delimiter\line BOOLEAN isDelim (char c)\line \{\line     if (c == SPACE || strchr(punctop, c) != NULL)\line         return true;\line     else\line         return false;\line \} // isDelim\line \line // skipblanks - return next non-blank pos in userinput\line int skipblanks (int p)\line \{\line     while (userinput[p] == SPACE)\line         p = p + 1;\line     return p;\line \} // skipblanks\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Global boolean variables eoln and eof are added to the C version to mimic the Pascal eoln and eof functions. The nextchar function below sets their values appropriately.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // nextchar - read next char - filter tabs,LF, comments\line //   Also filter CR/LF which were returned in input stream under WSL/Cygwin          \line char nextchar()\line \{\line     int c;\line  \line     eoln = false;\line \line     if (readfile)\line     \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         if ((c = getc(infp)) == EOF) // read from file\line         \{\line             readfile = false;\line             echo = false;\line             eoln = true;\line             eof = true;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
            }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
c = DOLLAR; // exit read loop in readDollar and readInput \line             fclose(infp);\line         \}\line         else if (echo)\line             printf("%c", c); // echo char\line     \}\line     else\line         c = getc(stdin); // read from stdin\line \line     if (c == LF)\line         eoln = true;\line \line // replace tab and eoln chars with space, skip comments\line     if (c == TAB || c == LF || c == CR)\line         c = SPACE;\line     else if (c == COMMENTCHAR) // skip comment chars\line     \{          \line         if (readfile)\line         \{\line             while ((c = getc(infp)) != LF)}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
                }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if (echo) printf("%c", c); // echo comment chars\line             if (echo) printf("%c", c);     // echo LF}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         \}\line         else\line             while ((c = getc(stdin)) != LF)\line                 ;\line         eoln = true;\line         c = SPACE; // replace LF with space\line     \}\line     return c;\line \} // nextchar\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // readDollar - read char's, ignoring newlines, till '$' is read\line //              '$' marks END of the fundef or expr that is being input\line void readDollar()\line \{\line     char c = SPACE;\line     char str[2]="";\line \line     do\line     \{   \line         if (!readfile && eoln)\line         \{\line             printf(PROMPT2); //continuation prompt\line             fflush(stdout);\line         \}\line         c = nextchar();\line         pos = pos+1;\line         if (pos == MAXINPUT)\line         \{\line             str[0] = c;      //last char read\line             errmsg(err_input_len, str, MAXINPUT);\line         \}\line         userinput[pos] = c;\line     \} while (c != DOLLAR);\line     dollarflag = true;\line \} // readDollar\line \line /* The next four functions, readCmdLine, parseCmdName, parseCmdNameArg and processCmd handle reading, parsing and executing the new load and sload commands. If readInput detects a right parenthesis as first character of the input line then it calls processCmd (which calls the others) to open the file and set readfile to true. While readfile is true, the nextchar function will read input chars from the opened file instead of the terminal. */\line \line // readCmdLine - read command line into userinput buffer.\line //               When readInput detects RPAREN as first char of input,\line //               it calls processCmd which calls readCmdLine to read\line //               rest of the cmd line. On entry to this function,\line //               pos==0 and userinput[0]==RPAREN.\line void readCmdLine()\line \{\line     char c = SPACE, *dollarPtr;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     while (!eoln)\line     \{\line         c = nextchar(); // sets eoln true on LF & returns SPACE\line         pos = pos + 1;\line         userinput[pos] = c;\line     \} \line \line // use dollar position (if any) or LF position to determine input length\line \line     if ((dollarPtr = strchr(userinput, DOLLAR)) != NULL)\line         inputleng = dollarPtr - userinput;\line     else\line         inputleng = pos;\line \line \} // readCmdLine\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // parseCmdName - return Cmd starting at userinput[pos]\line CMD parseCmdName()\line \{\line     char nm[MAXCMDLENG+1]; // for accumulating characters in Cmd\line     CMDSIZE leng; \line     CMD i;\line     BOOLEAN found;\line     int result;\line \line     nm[0] = 0;\line     leng = 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
result = 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: Command names contain only alpha chars}{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     while (pos < inputleng && isalpha(userinput[pos]))\line     \{\line         if (leng == MAXCMDLENG)\line         \{\line             nm[leng] = 0;\line             errmsg(err_cmd_len, nm, MAXCMDLENG);\line         \}\line         nm[leng] = userinput[pos];\line         leng = leng+1;\line         pos = pos+1;\line     \}\line     \line     if (leng == 0)\line         errmsg(err_no_cmd, null_str, null_int);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
    }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     nm[leng] = 0;  //null terminate Cmd name\line \line // Determine Cmd index in printCmds\line \line     i = 0; \line     found = false;\line     while (i < MAXCMDS && !found)\line     \{\line         result = strcmp(nm, printCmds[i]);        \line         if (!result)\line             found = true;\line         else\line             i = i+1;\line     \}   \line \line     if (!found)\line         errmsg(err_bad_cmd, nm, null_int);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     pos = skipblanks(pos); /* skip blanks after command name */\line     return i;\line \} // parseCmdName\line \line /* parseCmdArg - return the character string argument starting at\line    userinput[pos]. This function is currently used to parse the\line    filename argument from the load & sload commands */\line void parseCmdArg(char nm[])\line \{\line     ARGSIZE leng;   // length of argumnet name \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     nm[0] = 0; \line     leng = 0;\line     while (pos < inputleng && userinput[pos] > SPACE)\line     \{\line         if (leng == ARGLENG)\line         \{\line             nm[leng] = 0;\line             errmsg(err_arg_len, nm, ARGLENG);\line         \}\line         nm[leng] = userinput[pos];\line         leng = leng+1;\line         pos = pos+1;\line     \}\line \line     if (leng == 0)\line         errmsg(err_no_name, null_str, null_int);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     nm[leng] = 0;  //null terminate string\line \} // parseCmdArg\line \line // processCmd - input, parse, and execute the command\line void processCmd()\line \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
char cwd[PATH_MAX];\line     CMD cmdnm;  // cmdnm is an index to printCmds\line \line     readCmdLine();\line     pos = 1;                 // pos of 1st letter of command name}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     cmdnm = parseCmdName();  // parse command name\line     if (cmdnm == sload || cmdnm == load)\line     \{\line         parseCmdArg(infilename);   // parse filename argument\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         // Load commands cannot be issued inside another file being loaded.\line         if (!readfile) //if not already loading a file\line         \{\line             if ((infp = fopen(infilename, "r")) == NULL)\line                 errmsg(err_open, null_str, null_int);\line \line             if (getcwd(cwd, sizeof(cwd)) != NULL)\line                 printf("\\nCurrent Directory is: %s\\n", cwd);\line             else\line                 errmsg(err_cwd, null_str, null_int);\line \line             printf(" Loading file : %s\\n\\n",infilename);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             readfile = true;       // tell nextchar to read from file\line             eof = false;\line             if (cmdnm == load)\line                 echo = true;       // remains false for sload (silent load)\line         \}\line         else //error on nested load cmds\line             errmsg(err_nested_load, infilename, null_int);\line     \}\line     if (cmdnm == user)\line         prUserList();   // display user-defined entries\line \}  // processCmd\line \line // readInput - read char's into userinput array until dollar sign is input\line void readInput()\line \{\line     char c = SPACE;\line     char str[2]="";\line \line     dollarflag = false;\line     if (!readfile)\line     \{\line         printf(PROMPT);  //display main prompt for new input\line         fflush(stdout);\line     \}\line     pos = -1;\line     do\line     \{\line         c = nextchar();\line         pos = pos+1;\line         if (pos == MAXINPUT)\line         \{\line             str[0] = c;      //last char read\line             errmsg(err_input_len, str, MAXINPUT);\line         \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         userinput[pos] = c;\line // parse a command or fundef or expression\line         if (pos == 0 && c == RPAREN)  // If it\uc2 \u8217\'81\'66s a cmd (e.g. load or sload)\line         \{\line             processCmd();  //opens file, sets echo\line             if (!readfile)\line             \{                \line                 printf(PROMPT); // redisplay main prompt after a cmd\line                 fflush(stdout);\line             \}                               \line             pos = -1;  //restart userinput index\line         \}\line         else //parse fundef or expression\line         \{\line             if (userinput[pos] == DOLLAR)\line                 dollarflag = true;\line             else\uc1 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line                 if (eoln) readDollar();\line         \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     \} while (!dollarflag);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     inputleng = pos; // pos of '$' is length of input in 0 to pos-1\line \line     //remove LF and any other chars that follow dollar sign from input buffer\line     while (!eoln)\line         c = nextchar(); // sets eoln true on LF & returns SPACE\line \} // readInput\line \line // reader - read char's into userinput; be sure input is not blank\line void reader()\line \{\line     do\line     \{\line         readInput();                // read input into userinput array\line         pos = skipblanks(0);      // advance to first non-blank\line         if (userinput[pos] == DOLLAR) // if it is '$' then\line             inputleng = 0;               // it is a blank line\line     \} while (inputleng == 0); // ignore blank lines\line \} // reader\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line NAME install(char *); // forward declaration\line \line // parseName - return (installed) NAME starting at userinput[pos]\line NAME parseName()\line \{\line     char nm[NAMELENG+1]; // array to accumulate characters\line     NAMESIZE leng; // length of name\line \line     nm[0] = tokstring[0] = 0;\line     leng = 0;\line     while (pos < inputleng && !isDelim(userinput[pos]))\line     \{\line         if (leng == NAMELENG)\line         \{\line             nm[leng] = 0;\line             errmsg(err_name_len, nm, NAMELENG);\line         \}\line         nm[leng] = tokstring[leng] = userinput[pos];\line         leng = leng+1;\line         pos = pos+1;\line     \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if (leng == 0)\line         errmsg(err_no_name2, null_str, null_int);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
nm[leng] = tokstring[leng] = 0;  //null terminate\line     tokleng = leng;\line     pos = skipblanks(pos); /* skip blanks after name */\line     return install(nm);\line \} // parseName\line \line \line // isNumber - check if a number begins at userinput[i]\line //            It must be a sequence of digits followed by a delimiter\line //            otherwise it will be treated as a name.\line //            E.g. 232+ is parsed as the number 232 followed by a plus sign.\line //            but 232abc is parsed as a name since the digits are not\line //            followed by a delimiter.\line BOOLEAN isNumber(short int i)\line \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     if (!isdigit(userinput[i]))\line         return false;\line     else\line     \{}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         while (isdigit(userinput[i])) i = i + 1;\line         if (isDelim(userinput[i]))\line             return true;\line         else\line             return false;\line     \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\qj\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line \} // isNumber\line \line // parseVal - return number starting at userinput[pos]\line NUMBER parseVal()\line \{\line     NUMBER n;\line     char numString[MAXDIGITS+1]; //digits in value being parsed\line \line     numString[0] = tokstring[0] = 0;\line     n = 0;\line     tokleng = 0;\line     while (isdigit(userinput[pos]) && tokleng < MAXDIGITS)\line     \{\line         n = 10*n + (userinput[pos] - '0');\line         numString[tokleng] = tokstring[tokleng] = userinput[pos];\line         tokleng = tokleng+1;\line         pos = pos+1;\line     \}\line     numString[tokleng] = tokstring[tokleng] = 0; // null terminate\line     \line     if (isdigit(userinput[pos]))\line         errmsg(err_digits, null_str, MAXDIGITS); // Too many digits\line \line     pos = skipblanks(pos); //skip any blanks after number\line     return n;\line \}  //parseVal\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
//----------------------\line // NEW PARSING ROUTINES\line //----------------------}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // writeTokenName - Display the name corresponding to token symbol t.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
void writeTokenName(TOKEN t)\line \{\line     NAME i;\line \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if (t == nameidsy || t == numsy || t == funidsy)\line         // display generic name for user-defined symbols\line         switch (t)\line         \{\line             case nameidsy:\line                 printf("nameid");\line                 break;\line             case numsy:\line                 printf("number");\line                 break;\line             case funidsy:\line                 printf("funid");\line                 break;\line             default:\line                 break;\line          \}\line     else\line     \{\line     // display builtin name\line         i = 0;\line         while (toktable[i] != t && i < numBuiltins)\line             i = i+1;\line         if (i < numBuiltins)\line             // write the name of the token\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
            }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
printf("%s", printNames[i]);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
        }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
else  // name not found, display token id\line             printf("name not found for token %d", t);\line     \}\line \}  // of writeTokenName\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// writeTokenStr - Display token string. During errors, this function}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// is used to display the invalid token found in userinput.\line void writeTokenStr()\line \{\line     printf("%s ", tokstring);\line \} // writeTokenStr\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch
DD: All error messages in the Pascal version were given an error code and are now displayed by calling the errmsg() function below.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\cf2\lang1081\b\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// errmsg - display error message for given error number and jump to JL99 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// in main function\line void errmsg(ERROR_NUM errnum, char err_str[], int err_int)\line \{\line     printf("*****");\line     switch (errnum)\line     \{\line         case err_arglist:\line             printf("Error parsing arglist.  Found ");\line             writeTokenStr();\line             printf("where \\")\\" or nameid is expected.");\line             break;\line         case err_function:\line             printf("Error parsing function name.  Found ");\line             writeTokenStr();\line             printf("where funid or nameid is expected.");\line             break;\line         case err_exp6:\line             printf("Error parsing exp6.  Found ");\line             writeTokenStr();\line             printf("where nameid, funid, \\"(\\", or a number is expected.");\line             break;\line         case err_expr:\line             printf("Error parsing expr.  Found ");\line             writeTokenStr();\line             printf("where one of the following is expected:\\n");\line             printf("\\"if\\", \\"while\\", \\"seq\\", \\"print\\", nameid, funid, number, or \\"(\\"");\line             break;\line         case err_cwd:\line             perror("getcwd() error");\line             break;\line         case err_open:\line             perror("fopen() error");\line             break;\line         case err_max_names:\line             printf("No more room for names");\line             break; \line         case err_input_len:\line             printf("Input exceeds %d chars. Last char read = %s", err_int, err_str);\line             printf("\\nSkipping rest of input and quitting.");\line             quittingtime = true;\line             if (readfile) fclose(infp);\line             break;\line         case err_cmd_len:\line             printf("Command Name exceeds %d chars, begins: %s", err_int, err_str);\line             break;\line         case err_no_cmd:\line             printf("Error: expected Command name, instead read: %c", userinput[pos]);\line             break;\line         case err_bad_cmd:\line             printf("Unrecognized Command Name, begins: %s", err_str);\line             break;\line         case err_arg_len:\line             printf("Argument name exceeds %d chars, begins: %s", err_int, err_str);\line             break;\line         case err_no_name:\line             printf("Error: expected name, instead read: %c", userinput[pos]);\line             break;\line         case err_name_len:\line             printf("Name exceeds %d chars, begins: %s", err_int, err_str);\line             break;\line         case err_no_name2:\line             printf("Error: expected name, instead read: %c", userinput[pos]);\line             break;\line         case err_digits:\line             printf("parseVal: Max digits allowed in 64 bit signed long is %d", err_int);\line             break;\line         case err_no_name3:\line             printf("mutate: found ");\line             writeTokenStr();\line             printf(" where nameid or funid is expected.");\line             break; \line         case err_mismatch:\line             printf("Error in match. Found ");\line             writeTokenStr();\line             printf(" where ");\line             writeTokenName(err_int);\line             printf(" is expected.");\line             break;  \line         case err_not_var:\line             printf("parseExp1: left hand side of assignment must be a variable");\line             break;\line         case err_num_args:\line             printf("Wrong number of arguments to ");\line             prName(err_int);\line             break;\line         case err_undef_func:\line             printf("Undefined function: ");\line             prName(err_int);\line             break;\line         case err_num_args2:\line             printf("Wrong number of arguments to: ");\line             prName(err_int);\line             break;\line         case err_undef_var:\line             printf("Undefined variable: ");\line             prName(err_int);\line             break;\line         case err_undef_op:\line             printf("eval: invalid value for op = %d", err_int);\line             break;\line         case err_nested_load:\line             printf("Load commands cannot occur inside a file being loaded.\\n");\line             printf("*****");\line             printf("Remove the load command for file %s", err_str);\line             quittingtime = true;\line             fclose(infp);\line         default:\line             break;\line     \}\line     printf("\\n\\n");\line     longjmp(JL99, errnum);\line \}  // errmsg\line \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// getToken - get next token in userinput, set toksy, tokstring, tokleng.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
//  For names and operators, also set tokindex. For numbers, tokindex does}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
//  not apply since they are not stored in printNames.}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
void getToken()\line \{\line     char nm[2]; // array to accumulate characters\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
nm[0] = tokstring[0] = 0;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
if (isNumber(pos))  // parse a number\line     \{\line         numval = parseVal(); // set tokstring, tokleng\line         toksy = numsy;\line     \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     else if (userinput[pos] == ':' && userinput[pos+1] == '=')\line     // parse an assignment\line     \{\line         tokleng = 2;\line         nm[0] = tokstring[0] = ':';\line         nm[1] = tokstring[1] = '=';\line         nm[2] = tokstring[2] = 0;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         pos = pos + 2;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         pos = skipblanks(pos);\line         tokindex = install(nm); // set toksy\line     \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     else if (strchr(punctop, userinput[pos]) != NULL) \line     // parse single char punctuation or operator\line     \{\line         tokleng = 1;\line         nm[0] = tokstring[0] = userinput[pos];\line         nm[1] = tokstring[1] = 0;   // null terminate 1 char string\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
 }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         pos = pos + 1;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         pos = skipblanks(pos);\line         tokindex = install(nm);  // set toksy\line     \}}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     else  // else assume it is a name\line         tokindex = parseName();  // set toksy, tokstring, tokleng\line \} // getToken\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// mutate - Change type of toksy in toktable to newtype.\line // This function is currently used to redefine a variable name (nameidsy)\line // as a function name (funidsy)\line void mutate(TOKEN newtype)\line \{\line     if (toksy != nameidsy && toksy != funidsy)\line         errmsg(err_no_name3, null_str, null_int);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
else\line         toktable[tokindex] = toksy = newtype;\line \} // of mutate\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
// match - If the expected token t matches the current one in toksy}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
//           then call getToken() to get the next toksy}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
//           else print mismatch error\line void match(TOKEN t)\line \{\line      if (toksy == t)\line          getToken();\line      else\line          errmsg(err_mismatch, null_str, t);\line \} // match\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // parse parameters of a function definition \line NAMELIST parseParams()\line \{\line     NAME nm;\line     NAMELIST nl;\line \line     switch (toksy)\line     \{\line         case rparsy:      // end of list, return null\line             nl = 0;\line             break;\line         case nameidsy:\line             nm = tokindex;\line             match(nameidsy);\line             if (toksy == comsy)  // recursively parse remainder of list\line             \{\line                 match(comsy);\line                 nl = parseParams();\line             \}\line             else\line                 nl = 0;\line             nl = mkNamelist(nm, nl);\line             break;\line         default:\line             errmsg(err_arglist, null_str, null_int);\line             break;\line     \}\line     return nl;\line \}  // parseParams\line \line EXP parseExpr(void); //forward declaration\line \line // parseDef - parse function definition at userinput[pos]\line // syntax: fun fun_name(arglist):=eL nuf\line NAME parseDef()\line \{\line      NAME fname;        // function name\line      NAMELIST nl;       // formal parameters\line      EXP e;             // body\line \line      match(funsy);    // match \uc2 \u8220\'81\'67fun\u8221\'81\'68 and get next toksy\uc1 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line      switch (toksy)   // match name\line      \{\line          case nameidsy:  \line             mutate(funidsy); // set type to funidsy & do case funidsy\line          case funidsy:\line             fname = tokindex; // save name index for use below\line             match(funidsy);\line             break;\line          default:\line             errmsg(err_function, null_str, null_int);\line             break;\line      \}\line      match(lparsy);\line      nl = parseParams();\line      match(rparsy);\line      match(assignsy);\line      e = parseExpr();\line      match(nufsy);\line      newDef(fname, nl, e);\line      return fname;\line \} // parseDef\line \line // parse arguments of a function call\line EXPLIST parseArgs()\line \{\line     EXP e;\line     EXPLIST eL;\line \line     if (toksy == rparsy)      // RPAREN marks end of arg list\line         return 0;\line     else\line     \{\line         e = parseExpr();\line         if (toksy == comsy)   // recursively parse rest of arg list   \line         \{\line             match(comsy);\line             eL = parseArgs();\line         \}\line         else\line             eL = 0;\line         return mkExplist(e,eL);\line     \}\line \} // parseArgs\line \line // parse function call\line // syntax: f(e1,e2, . . . , en)\line EXP parseCall()\line \{\line     EXPLIST eL;\line     NAME nm;\line \line     nm = tokindex;\line     match(funidsy);\line     match(lparsy);\line     eL = parseArgs();\line     match(rparsy);\line     return mkAPEXP(nm,eL);\line \} /* parseCall */\line \line // parseExplist - parse expression list\line EXPLIST parseExplist()\line \{\line     EXP e;\line     EXPLIST eL;\line \line     e = parseExpr();\line     if (toksy == semsy)\line     \{\line         match(semsy);\line         eL = parseExplist();\line     \}\line     else\line         eL = 0;\line     return mkExplist(e,eL);\line \} // parseExplist\line \line // parse if expression\line // syntax: if e1 then e2 else e3 fi\line EXP parseIf()\line \{\line     EXP e1,e2,e3;\line     EXPLIST eL;\line     NAME nm;\line \line     nm = tokindex;\line     match(ifsy);\line     e1 = parseExpr();\line     match(thensy);\line     e2 = parseExpr();\line     match(elsesy);\line     e3 = parseExpr();\line     match(fisy);\line     eL = mkExplist(e3,0);\line     eL = mkExplist(e2,eL);\line     eL = mkExplist(e1,eL);\line     return mkAPEXP(nm,eL);\line \} // parseIf\line \line // parse while expression\line // syntax: while e1 do e2 od\line EXP parseWhile()\line \{\line     EXP e1,e2;\line     EXPLIST eL;\line     NAME nm;\line \line     nm = tokindex;\line     match(whilesy);\line     e1 = parseExpr();\line     match(dosy);\line     e2 = parseExpr();\line     match(odsy);\line     eL = mkExplist(e2,0);\line     eL = mkExplist(e1,eL);\line     return mkAPEXP(nm,eL);\line \} // parseWhile\line \line // parse sequence expression\line EXP parseSeq()\line \{\line     EXPLIST eL;\line     NAME nm;\line \line     nm = tokindex;\line     match(seqsy);\line     eL = parseExplist();\line     match(qessy);\line     return mkAPEXP(nm,eL);\line \} // parseSeq\line \line /* \line    The following functions (parseExp1 through parseExp6) implement the\line    following grammar rules.\line \line    exp1 \uc2 \u8722\'81\'7c\u8594\'81\'a8 exp2 [ :=  exp1 ]*\line    exp2 \u8722\'81\'7c\u8594\'81\'a8 [ prtop ] exp3\line    exp3 \u8722\'81\'7c\u8594\'81\'a8 exp4 [ relop exp4 ]*\line    exp4 \u8722\'81\'7c\u8594\'81\'a8 exp5 [ addop exp5 ]*\line    exp5 \u8722\'81\'7c\u8594\'81\'a8 [ addop ] exp6 [ mulop exp6 ]*\line    exp6 \u8722\'81\'7c\u8594\'81\'a8 name | integer | funcall | ( expr )\line \line    The recursive structure of these rules yields the following precedence \uc1 }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
from lowest to highest:\line    \line      :=\line      prtop\line      relop\line      addop\line      unary addop, mulop\line      variable name, integer, function call, expression in parentheses\line \line    Since the functions call each other recursively, they are implemented }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi270\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
in reverse order below to avoid forward declarations.\line */\line \line // parse variable name, integer, parenthesized expr, function call\line EXP parseExp6()\line \{\line     EXP ex;\line     NAME varnm;\line     NUMBER num;\line \line     switch (toksy)\line     \{\line         case nameidsy:\line             varnm = tokindex;\line             match(nameidsy);\line             ex = mkVAREXP(varnm);\line             break;\line         case numsy:\line             num = numval;\line             match(numsy);\line             ex = mkVALEXP(num);\line             break;\line         case lparsy:\line             match(lparsy);\line             ex = parseExpr();\line             match(rparsy);\line             break;\line         case funidsy:\line             ex = parseCall();\line             break;\line         default:\line              errmsg(err_exp6, null_str, null_int);\line              break;\line     \}\line     return ex;     // return pointer to expression\line \} // parseExp6\line \line // parse unary addop, binary mulop\line EXP parseExp5()\line \{\line     NAME nm;\line     EXP ex,e1,e2;\line     EXPLIST eL;\line     TOKEN addop_token = 0;\line     NUMBER sign;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     if (toksy == addsy || toksy == subsy) // unary + or -\line     \{\line         addop_token = toksy;\line         match(toksy);\line     \}\line \line     e1 = parseExp6();\line \line     if (addop_token == subsy)  // unary minus \line     \{\line         // make an expr to multiply e1 by -1\line         sign = -1;\line         ex = mkVALEXP(sign);\line         eL = mkExplist(ex,0);\line         eL = mkExplist(e1,eL);\line         nm = mulsy_index;\line         e1 = mkAPEXP(nm,eL);\line     \}\line \line     while (toksy == mulsy || toksy == divsy) // binary mulops\line     \{\line         nm = tokindex;\line         match(toktable[nm]);\line         e2 = parseExp6();\line         eL = mkExplist(e2,0);\line         eL = mkExplist(e1,eL);\line         e1 = mkAPEXP(nm,eL);\line     \}\line     return e1;\line \} // parseExp5\line \line // parse binary addop\line EXP parseExp4()\line \{\line     NAME nm;\line     EXP e1,e2;\line     EXPLIST eL;\line \line     e1 = parseExp5();\line     while (toksy == addsy || toksy == subsy)\line     \{\line         nm = tokindex;\line         match(toktable[nm]);\line         e2 = parseExp5();\line         eL = mkExplist(e2,0);\line         eL = mkExplist(e1,eL);\line         e1 = mkAPEXP(nm,eL);\line     \}\line     return e1;\line \} // parseExp4\line \line // parse binary relop\line EXP parseExp3()\line \{\line     NAME nm;\line     EXP e1,e2;\line     EXPLIST eL;\line \line     e1 = parseExp4();\line     while (toksy == lssy || toksy == eqsy || toksy == gtsy)\line     \{\line         nm = tokindex;\line         match(toktable[nm]);\line         e2 = parseExp4();\line         eL = mkExplist(e2,0);\line         eL = mkExplist(e1,eL);\line         e1 = mkAPEXP(nm,eL);\line     \}\line         return e1;\line \} // parseExp3}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // parse print op\line EXP parseExp2()\line \{\line     EXPLIST eL;\line     EXP ex;\line     NAME nm;\line     BOOLEAN printflag;\line \line     printflag = false;\line     if (toksy == printsy)\line     \{\line         printflag = true;\line         nm = tokindex;\line         match(printsy);\line     \}\line     ex = parseExp3();\line     if (printflag)\line     \{\line         eL = mkExplist(ex,0);\line         return mkAPEXP(nm,eL);\line     \}\line     else\line         return ex;\line \} // parseExp2\line \line // parse assign op\line EXP parseExp1()\line \{\line     EXPLIST eL;\line     EXP ex,e2;\line     NAME nm;\line \line     ex = parseExp2();\line     while (toksy == assignsy)\line     \{\line         // build an assignment expression\line         nm = tokindex;\line         match(assignsy);\line         if (ex->etype == VAREXP) // lhs must be a variable\line         \{\line             e2 = parseExp1();   // process rhs\line             eL = mkExplist(e2,0);\line             eL = mkExplist(ex,eL);\line             ex = mkAPEXP(nm,eL);\line         \}\line         else  // illegal lhs\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
            }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
errmsg(err_not_var, null_str, null_int);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\} // while\line     return ex;\line \} // parseExp1\line \line // parse if, while, seq, Exp1 \line EXP parseExpr()\line \{\line     EXP ex;\line \line     switch (toksy)\line     \{\line         case ifsy:\line             ex = parseIf();\line             break;\line         case whilesy:\line             ex = parseWhile();\line             break;\line         case seqsy:\line             ex = parseSeq();\line             break;\line         case nameidsy:\line         case numsy:\line         case subsy:\line         case funidsy:\line         case printsy:\line         case lparsy:\line             ex = parseExp1();\line             break;\line         default:\line             errmsg(err_expr, null_str, null_int);\line             break;\line     \} // case\line     return ex;\line \} /* parseExpr */\line \line //--------------\line // ENVIRONMENTS\line //--------------\line \line // emptyEnv - return an environment with no bindings\line ENV emptyEnv()\line \{\line     return mkEnv(0, 0);\line \} // emptyEnv\line \line // bindVar - bind variable nm to value n in environment rho\line void bindVar (NAME nm, NUMBER n, ENV rho)\line \{\line     rho->vars = mkNamelist(nm, rho->vars);\line     rho->values = mkValuelist(n, rho->values);\line \} // bindVar\line \line // findVar - look up nm in rho\line VALUELIST findVar (NAME nm, ENV rho)\line \{\line     NAMELIST nl;\line     VALUELIST vl;\line     BOOLEAN found;\line \line     found = false;\line     nl = rho->vars;\line     vl = rho->values;\line     while (nl != 0 && !found)\line     \{\line         if (nl->head == nm)\line             found = true;\line         else\line         \{\line             nl = nl->tail;\line             vl = vl->tail;\line         \}\line     \}\line     return vl;\line \} // findVar\line \line // assign - assign value n to variable nm in rho\line void assign (NAME nm, NUMBER n, ENV rho)\line \{\line     VALUELIST varloc;\line \line     varloc = findVar(nm, rho);\line     varloc->head = n;\line \} // assign\line \line // fetch - return number bound to nm in rho\line NUMBER fetch (NAME nm, ENV rho)\line \{\line     VALUELIST vl;\line \line     vl = findVar(nm, rho);\line     return vl->head;\line \}  // fetch\line \line // isBound - check if nm is bound in rho\line int isBound (NAME nm, ENV rho)\line \{\line     return findVar(nm, rho) != 0;\line \} // isBound\line \line //---------\line // NUMBERS\line //---------\line \line // prValue - print number n\line void prValue (NUMBER n)\line \{\line     printf("%ld",n);\line \}\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // arity - return number of arguments expected by op\line int arity (BUILTINOP op)\line \{\line     if (op >= ADDOP && op <= GTOP)\line         return 2; \line     else \line         return 1;\line \} // arity\line \line void prName(NAME);  // forward declaration\line \line // applyValueOp - apply operator to arguments in VALUELIST\line NUMBER applyValueOp (BUILTINOP op, VALUELIST vl)\line \{\line     NUMBER n, n1, n2;\line \line     if (arity(op) != lengthVL(vl))\line         errmsg(err_num_args, null_str, op);\line     \line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
n1 = vl->head;           // 1st actual\line     if (arity(op) == 2) \line         n2 = vl->tail->head; // 2nd actual\line     \line     switch (op)\line     \{\line         case ADDOP:\line             n = n1 + n2;\line             break;\line         case SUBOP:\line             n = n1 - n2;\line             break;\line         case MULOP:\line             n = n1 * n2;\line             break;\line         case DIVOP:\line             n = n1 / n2;\line             break;\line         case EQOP:\line             if (n1 == n2)\line                 n = 1;\line             else\line                 n = 0;\line             break;\line         case LTOP: \line             if (n1 < n2)\line                 n = 1;\line             else\line                 n = 0;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052
        }{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
break;\line         case GTOP:\line             if (n1 > n2)\line                 n = 1;\line             else\line                 n = 0;\line             break;\line         case PRINTOP:\line             prValue(n1);\line             printf("\\n");\line             n = n1;\line             break;\line         default:   // this case should never occur\line             printf("applyValueOp: bad value for op = %d\\n", op);\line             break;\line     \} // switch\line     return n;\line \} // applyValueOp\line \line \line //------------\line // EVALUATION\line //------------\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line NUMBER eval (EXP, ENV);   // forward declaration\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line // evalList - evaluate each expression in eL\line VALUELIST evalList (EXPLIST eL, ENV rho)\line \{\line     NUMBER h;\line     VALUELIST t;\line \line     if (eL == 0)\line         return 0;\line     else\line     \{\line         h = eval(eL->head, rho);\line         t = evalList(eL->tail, rho);\line         return mkValuelist(h, t);\line     \}\line \} // evalList\line \line // applyUserFun - look up definition of nm and apply to actuals\line NUMBER applyUserFun (NAME nm, VALUELIST actuals)\line \{\line     FUNDEF f;\line     ENV rho;\line \line     f = fetchDef(nm);\line     if (f == 0)\line         errmsg(err_undef_func, null_str, nm);\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     if (lengthNL(f->formals) != lengthVL(actuals))\line         errmsg(err_num_args2, null_str, nm);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     rho = mkEnv(f->formals, actuals);\line     return eval(f->body, rho);}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line \} // applyUserFun\line \line // applyCtrlOp - apply CONTROLOP op to args in rho\line NUMBER applyCtrlOp (BUILTINOP op, EXPLIST args, ENV rho)\line \{\line     NUMBER n;\line }
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line     switch (op)\line     \{\line         case IFOP:\line             if (eval(args->head, rho))\line                 n = eval(args->tail->head, rho);\line             else\line                 n = eval(args->tail->tail->head, rho);\line             break;\line         case WHILEOP:}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             n = eval(args->head, rho);\line             while (n)\line             \{\line                 n = eval(args->tail->head, rho);\line                 n = eval(args->head, rho);\line             \}\line             break;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         case ASSIGNOP:}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             n = eval(args->tail->head, rho);\line             if (isBound(args->head->u.varble, rho))\line                 assign(args->head->u.varble, n, rho);\line             else if (isBound(args->head->u.varble, globalEnv))\line                 assign(args->head->u.varble, n, globalEnv);\line             else \line                 bindVar(args->head->u.varble, n, globalEnv);\line             break;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         case SEQOP:}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line             while (args->tail != 0)\line             \{\line                 n = eval(args->head, rho);\line                 args = args->tail;\line             \}\line             n = eval(args->head, rho);  //value of last statement in seq\line             break;\line         default:\line             printf("applyCtrlOp: bad value for op = %d\\n", op);\line             break;\line     \}  // switch\line     return n;\line \} // applyCtrlOp\line \line // eval - return value of expression e in local environment rho\line NUMBER eval (EXP e, ENV rho)\line \{\line     BUILTINOP op;\line     NUMBER n;\line \line     switch (e->etype)\line     \{\line         case VALEXP:\line             n = e->u.num;\line             break;\line         case VAREXP:\line             if (isBound(e->u.varble, rho))\line                 n = fetch(e->u.varble, rho);\line             else if (isBound(e->u.varble, globalEnv))\line                 n = fetch(e->u.varble, globalEnv);\line             else\line                 errmsg(err_undef_var, null_str, e->u.varble);\line             break;}
\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\fi360\li0\lin0\ri0\rin0\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch

\par \pard\plain \s37\rtlch\alang1081 \ltrch\langfe1081\hich\af7\loch\widctlpar\hyphpar0\fi0\li0\lin0\ri0\rin0\cf0\f7\fs18\kerning1\dbch\af8\langfe1081\intbl\ql\ltrpar{\rtlch\af11\afs24 \ltrch\lang1081\langfe2052\loch\lang1081\kerning0\dbch\langfe2052\loch
\line         case APEXP:\line             op = e->u.ap.optr;\line             if (op > numBuiltins-1)\line                 n = applyUserFun(op, evalList(e->u.ap.args, rho));\line             else\line             \{\line                 if (op >= firstControlOp && op <= lastControlOp)\line                     n = applyCtrlOp(op, e->u.ap.args, rho);\line                 else if (op >= firstValueOp && op <= lastValueOp)\line                     n = applyValueOp(op, evalList(e->u.ap.args, rho));\line                 else\line                     errmsg(err_undef_op, null_str, op);\line             \}\line             break;\line         default:\line             printf("Invalid etype = %d", e->etype);\line             break;\line     \} // switch\line     return n;         \line \} // eval\line \line //----------------------------\line // READ-EVAL-PRINT LOOP (REPL)\line //----------------------------\line \line int main (int argc, char **argv)\line \{\line     short int error_no=0;\line \line     initNames();\line     initCmds();\line     initParse();\line \line     globalEnv = emptyEnv();\line     quittingtime = false;\line \line // Set the jump location for longjmp.\line // After a parse error, errmsg() displays the error message and does\line // a longjmp to here. The program then continues with the REPL below.\line     if (setjmp(JL99))\line         ;\line \line // repeatedly read, parse and evaluate the input\line // until "quit$" is entered\line \line     while (!quittingtime)\line     \{\line         reader();\line         getToken();\line \line         if (toksy == quitsy)\line             quittingtime = true;\line         else if (toksy == funsy)\line         \{\line             prName(parseDef());\line             printf("\\n\\n");\line         \}\line         else\line         \{\line             currentExp = parseExpr();\line             prValue(eval(currentExp, emptyEnv()));\line             printf("\\n\\n");\line         \}\line     \} // while\line     exit (EXIT_SUCCESS);\line \}\line }\cell\row\pard \pard\plain \s0\rtlch\af8\afs24\alang1081 \ltrch\lang1033\langfe1081\hich\af4\loch\widctlpar\hyphpar0\ltrpar\cf0\f4\fs21\lang1033\kerning1\dbch\af8\langfe1081\ql\fi0\li0\lin0\ri0\rin0\loch\kerning0\dbch\af9\langfe1033\loch

\par }